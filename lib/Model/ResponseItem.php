<?php
/**
 * ResponseItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Parcel DE Shipping API (Post & Parcel Germany)
 *
 * Note: This is the specification of the DPDHL Group Parcel DE Shipping API for Post & Parcel Germany. This REST web service allows business customers to create shipping labels on demand.
 *
 * The version of the OpenAPI document: 2.1.9
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\DHLParcel\Model;

use \ArrayAccess;
use \Spy\DHLParcel\ObjectSerializer;

/**
 * ResponseItem Class Doc Comment
 *
 * @category Class
 * @description Response for a single shipment containing status, numbers and labels
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResponseItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ResponseItemModelFields
      */
    public static function GetModelFields(): ResponseItemModelFields
    {
        return new ResponseItemModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ResponseItemModelAttributes
      */
    public static function GetModelAttributes(): ResponseItemModelAttributes
    {
        return new ResponseItemModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResponseItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipment_no' => 'string',
        'routing_code' => 'string',
        'return_shipment_no' => 'string',
        'sstatus' => '\Spy\DHLParcel\Model\RequestStatus',
        'shipment_ref_no' => 'string',
        'label' => '\Spy\DHLParcel\Model\Document',
        'return_label' => '\Spy\DHLParcel\Model\Document',
        'customs_doc' => '\Spy\DHLParcel\Model\Document',
        'cod_label' => '\Spy\DHLParcel\Model\Document',
        'validation_messages' => '\Spy\DHLParcel\Model\ValidationMessageItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipment_no' => null,
        'routing_code' => null,
        'return_shipment_no' => null,
        'sstatus' => null,
        'shipment_ref_no' => null,
        'label' => null,
        'return_label' => null,
        'customs_doc' => null,
        'cod_label' => null,
        'validation_messages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shipment_no' => false,
        'routing_code' => false,
        'return_shipment_no' => false,
        'sstatus' => false,
        'shipment_ref_no' => false,
        'label' => false,
        'return_label' => false,
        'customs_doc' => false,
        'cod_label' => false,
        'validation_messages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipment_no' => 'shipmentNo',
        'routing_code' => 'routingCode',
        'return_shipment_no' => 'returnShipmentNo',
        'sstatus' => 'sstatus',
        'shipment_ref_no' => 'shipmentRefNo',
        'label' => 'label',
        'return_label' => 'returnLabel',
        'customs_doc' => 'customsDoc',
        'cod_label' => 'codLabel',
        'validation_messages' => 'validationMessages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipment_no' => 'setShipmentNo',
        'routing_code' => 'setRoutingCode',
        'return_shipment_no' => 'setReturnShipmentNo',
        'sstatus' => 'setSstatus',
        'shipment_ref_no' => 'setShipmentRefNo',
        'label' => 'setLabel',
        'return_label' => 'setReturnLabel',
        'customs_doc' => 'setCustomsDoc',
        'cod_label' => 'setCodLabel',
        'validation_messages' => 'setValidationMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipment_no' => 'getShipmentNo',
        'routing_code' => 'getRoutingCode',
        'return_shipment_no' => 'getReturnShipmentNo',
        'sstatus' => 'getSstatus',
        'shipment_ref_no' => 'getShipmentRefNo',
        'label' => 'getLabel',
        'return_label' => 'getReturnLabel',
        'customs_doc' => 'getCustomsDoc',
        'cod_label' => 'getCodLabel',
        'validation_messages' => 'getValidationMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shipment_no', $data ?? [], null);
        $this->setIfExists('routing_code', $data ?? [], null);
        $this->setIfExists('return_shipment_no', $data ?? [], null);
        $this->setIfExists('sstatus', $data ?? [], null);
        $this->setIfExists('shipment_ref_no', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('return_label', $data ?? [], null);
        $this->setIfExists('customs_doc', $data ?? [], null);
        $this->setIfExists('cod_label', $data ?? [], null);
        $this->setIfExists('validation_messages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['shipment_no']) && (mb_strlen($this->container['shipment_no']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipment_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipment_no']) && (mb_strlen($this->container['shipment_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'shipment_no', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['routing_code']) && (mb_strlen($this->container['routing_code']) > 35)) {
            $invalidProperties[] = "invalid value for 'routing_code', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['routing_code']) && (mb_strlen($this->container['routing_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'routing_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['return_shipment_no']) && (mb_strlen($this->container['return_shipment_no']) > 50)) {
            $invalidProperties[] = "invalid value for 'return_shipment_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['return_shipment_no']) && (mb_strlen($this->container['return_shipment_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'return_shipment_no', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['sstatus'] === null) {
            $invalidProperties[] = "'sstatus' can't be null";
        }
        if (!is_null($this->container['shipment_ref_no']) && (mb_strlen($this->container['shipment_ref_no']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipment_ref_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipment_ref_no']) && (mb_strlen($this->container['shipment_ref_no']) < 6)) {
            $invalidProperties[] = "invalid value for 'shipment_ref_no', the character length must be bigger than or equal to 6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipment_no
     *
     * @return string|null
     */
    public function getShipmentNo()
    {
        return $this->container['shipment_no'];
    }

    /**
     * Sets shipment_no
     *
     * @param string|null $shipment_no shipment_no
     *
     * @return self
     */
    public function setShipmentNo($shipment_no)
    {
        if (is_null($shipment_no)) {
            throw new \InvalidArgumentException('non-nullable shipment_no cannot be null');
        }
        if ((mb_strlen($shipment_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipment_no when calling ResponseItem., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($shipment_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shipment_no when calling ResponseItem., must be bigger than or equal to 0.');
        }

        $this->container['shipment_no'] = $shipment_no;

        return $this;
    }

    /**
     * Gets routing_code
     *
     * @return string|null
     */
    public function getRoutingCode()
    {
        return $this->container['routing_code'];
    }

    /**
     * Sets routing_code
     *
     * @param string|null $routing_code Routing code of the consignee address
     *
     * @return self
     */
    public function setRoutingCode($routing_code)
    {
        if (is_null($routing_code)) {
            throw new \InvalidArgumentException('non-nullable routing_code cannot be null');
        }
        if ((mb_strlen($routing_code) > 35)) {
            throw new \InvalidArgumentException('invalid length for $routing_code when calling ResponseItem., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($routing_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $routing_code when calling ResponseItem., must be bigger than or equal to 0.');
        }

        $this->container['routing_code'] = $routing_code;

        return $this;
    }

    /**
     * Gets return_shipment_no
     *
     * @return string|null
     */
    public function getReturnShipmentNo()
    {
        return $this->container['return_shipment_no'];
    }

    /**
     * Sets return_shipment_no
     *
     * @param string|null $return_shipment_no return_shipment_no
     *
     * @return self
     */
    public function setReturnShipmentNo($return_shipment_no)
    {
        if (is_null($return_shipment_no)) {
            throw new \InvalidArgumentException('non-nullable return_shipment_no cannot be null');
        }
        if ((mb_strlen($return_shipment_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $return_shipment_no when calling ResponseItem., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($return_shipment_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $return_shipment_no when calling ResponseItem., must be bigger than or equal to 0.');
        }

        $this->container['return_shipment_no'] = $return_shipment_no;

        return $this;
    }

    /**
     * Gets sstatus
     *
     * @return \Spy\DHLParcel\Model\RequestStatus
     */
    public function getSstatus()
    {
        return $this->container['sstatus'];
    }

    /**
     * Sets sstatus
     *
     * @param \Spy\DHLParcel\Model\RequestStatus $sstatus sstatus
     *
     * @return self
     */
    public function setSstatus($sstatus)
    {
        if (is_null($sstatus)) {
            throw new \InvalidArgumentException('non-nullable sstatus cannot be null');
        }
        $this->container['sstatus'] = $sstatus;

        return $this;
    }

    /**
     * Gets shipment_ref_no
     *
     * @return string|null
     */
    public function getShipmentRefNo()
    {
        return $this->container['shipment_ref_no'];
    }

    /**
     * Sets shipment_ref_no
     *
     * @param string|null $shipment_ref_no shipment_ref_no
     *
     * @return self
     */
    public function setShipmentRefNo($shipment_ref_no)
    {
        if (is_null($shipment_ref_no)) {
            throw new \InvalidArgumentException('non-nullable shipment_ref_no cannot be null');
        }
        if ((mb_strlen($shipment_ref_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipment_ref_no when calling ResponseItem., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($shipment_ref_no) < 6)) {
            throw new \InvalidArgumentException('invalid length for $shipment_ref_no when calling ResponseItem., must be bigger than or equal to 6.');
        }

        $this->container['shipment_ref_no'] = $shipment_ref_no;

        return $this;
    }

    /**
     * Gets label
     *
     * @return \Spy\DHLParcel\Model\Document|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param \Spy\DHLParcel\Model\Document|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets return_label
     *
     * @return \Spy\DHLParcel\Model\Document|null
     */
    public function getReturnLabel()
    {
        return $this->container['return_label'];
    }

    /**
     * Sets return_label
     *
     * @param \Spy\DHLParcel\Model\Document|null $return_label return_label
     *
     * @return self
     */
    public function setReturnLabel($return_label)
    {
        if (is_null($return_label)) {
            throw new \InvalidArgumentException('non-nullable return_label cannot be null');
        }
        $this->container['return_label'] = $return_label;

        return $this;
    }

    /**
     * Gets customs_doc
     *
     * @return \Spy\DHLParcel\Model\Document|null
     */
    public function getCustomsDoc()
    {
        return $this->container['customs_doc'];
    }

    /**
     * Sets customs_doc
     *
     * @param \Spy\DHLParcel\Model\Document|null $customs_doc customs_doc
     *
     * @return self
     */
    public function setCustomsDoc($customs_doc)
    {
        if (is_null($customs_doc)) {
            throw new \InvalidArgumentException('non-nullable customs_doc cannot be null');
        }
        $this->container['customs_doc'] = $customs_doc;

        return $this;
    }

    /**
     * Gets cod_label
     *
     * @return \Spy\DHLParcel\Model\Document|null
     */
    public function getCodLabel()
    {
        return $this->container['cod_label'];
    }

    /**
     * Sets cod_label
     *
     * @param \Spy\DHLParcel\Model\Document|null $cod_label cod_label
     *
     * @return self
     */
    public function setCodLabel($cod_label)
    {
        if (is_null($cod_label)) {
            throw new \InvalidArgumentException('non-nullable cod_label cannot be null');
        }
        $this->container['cod_label'] = $cod_label;

        return $this;
    }

    /**
     * Gets validation_messages
     *
     * @return \Spy\DHLParcel\Model\ValidationMessageItem[]|null
     */
    public function getValidationMessages()
    {
        return $this->container['validation_messages'];
    }

    /**
     * Sets validation_messages
     *
     * @param \Spy\DHLParcel\Model\ValidationMessageItem[]|null $validation_messages Optional validation messages attached to the shipment.
     *
     * @return self
     */
    public function setValidationMessages($validation_messages)
    {
        if (is_null($validation_messages)) {
            throw new \InvalidArgumentException('non-nullable validation_messages cannot be null');
        }
        $this->container['validation_messages'] = $validation_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


