<?php
/**
 * BulkOrderDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deutsche Post International Shipping API - QA
 *
 * Welcome to the Deutsche Post International API! <br/><br/> This API provides an interface for our shipping and tracking services. It enables open integration channels for our customers and partners.
 *
 * The version of the OpenAPI document: 5.7.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\DHLParcel\Model;

use \ArrayAccess;
use \Spy\DHLParcel\ObjectSerializer;

/**
 * BulkOrderDto Class Doc Comment
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BulkOrderDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return BulkOrderDtoModelFields
      */
    public static function GetModelFields(): BulkOrderDtoModelFields
    {
        return new BulkOrderDtoModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return BulkOrderDtoModelAttributes
      */
    public static function GetModelAttributes(): BulkOrderDtoModelAttributes
    {
        return new BulkOrderDtoModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BulkOrderDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'contact_name' => 'string',
        'phone_number' => 'string',
        'job_reference' => 'string',
        'product_type' => 'string',
        'bulk_order_type' => 'string',
        'awb' => 'string',
        'bulk_bags' => '\Spy\DHLParcel\Model\BulkBagDto[]',
        'status' => 'string',
        'validation_errors' => 'bool',
        'error_message' => 'string',
        'number_of_copies' => 'int',
        'download_token' => 'string',
        'printable' => 'bool',
        'order_classification' => 'string',
        'created_at' => '\DateTime',
        'created_by' => 'string',
        'auth_user' => 'string',
        'send_date' => '\DateTime',
        'submitted_date' => '\DateTime',
        'preadvice_eligible' => 'bool',
        'finalised' => 'bool',
        'total_item_weight_sum' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'contact_name' => null,
        'phone_number' => null,
        'job_reference' => null,
        'product_type' => null,
        'bulk_order_type' => null,
        'awb' => null,
        'bulk_bags' => null,
        'status' => null,
        'validation_errors' => null,
        'error_message' => null,
        'number_of_copies' => 'int32',
        'download_token' => null,
        'printable' => null,
        'order_classification' => null,
        'created_at' => 'date-time',
        'created_by' => null,
        'auth_user' => null,
        'send_date' => 'date-time',
        'submitted_date' => 'date-time',
        'preadvice_eligible' => null,
        'finalised' => null,
        'total_item_weight_sum' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'contact_name' => false,
		'phone_number' => false,
		'job_reference' => false,
		'product_type' => false,
		'bulk_order_type' => false,
		'awb' => false,
		'bulk_bags' => false,
		'status' => false,
		'validation_errors' => false,
		'error_message' => false,
		'number_of_copies' => false,
		'download_token' => false,
		'printable' => false,
		'order_classification' => false,
		'created_at' => false,
		'created_by' => false,
		'auth_user' => false,
		'send_date' => false,
		'submitted_date' => false,
		'preadvice_eligible' => false,
		'finalised' => false,
		'total_item_weight_sum' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'contact_name' => 'contactName',
        'phone_number' => 'phoneNumber',
        'job_reference' => 'jobReference',
        'product_type' => 'productType',
        'bulk_order_type' => 'bulkOrderType',
        'awb' => 'awb',
        'bulk_bags' => 'bulkBags',
        'status' => 'status',
        'validation_errors' => 'validationErrors',
        'error_message' => 'errorMessage',
        'number_of_copies' => 'numberOfCopies',
        'download_token' => 'downloadToken',
        'printable' => 'printable',
        'order_classification' => 'orderClassification',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'auth_user' => 'authUser',
        'send_date' => 'sendDate',
        'submitted_date' => 'submittedDate',
        'preadvice_eligible' => 'preadviceEligible',
        'finalised' => 'finalised',
        'total_item_weight_sum' => 'totalItemWeightSum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'contact_name' => 'setContactName',
        'phone_number' => 'setPhoneNumber',
        'job_reference' => 'setJobReference',
        'product_type' => 'setProductType',
        'bulk_order_type' => 'setBulkOrderType',
        'awb' => 'setAwb',
        'bulk_bags' => 'setBulkBags',
        'status' => 'setStatus',
        'validation_errors' => 'setValidationErrors',
        'error_message' => 'setErrorMessage',
        'number_of_copies' => 'setNumberOfCopies',
        'download_token' => 'setDownloadToken',
        'printable' => 'setPrintable',
        'order_classification' => 'setOrderClassification',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'auth_user' => 'setAuthUser',
        'send_date' => 'setSendDate',
        'submitted_date' => 'setSubmittedDate',
        'preadvice_eligible' => 'setPreadviceEligible',
        'finalised' => 'setFinalised',
        'total_item_weight_sum' => 'setTotalItemWeightSum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'contact_name' => 'getContactName',
        'phone_number' => 'getPhoneNumber',
        'job_reference' => 'getJobReference',
        'product_type' => 'getProductType',
        'bulk_order_type' => 'getBulkOrderType',
        'awb' => 'getAwb',
        'bulk_bags' => 'getBulkBags',
        'status' => 'getStatus',
        'validation_errors' => 'getValidationErrors',
        'error_message' => 'getErrorMessage',
        'number_of_copies' => 'getNumberOfCopies',
        'download_token' => 'getDownloadToken',
        'printable' => 'getPrintable',
        'order_classification' => 'getOrderClassification',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'auth_user' => 'getAuthUser',
        'send_date' => 'getSendDate',
        'submitted_date' => 'getSubmittedDate',
        'preadvice_eligible' => 'getPreadviceEligible',
        'finalised' => 'getFinalised',
        'total_item_weight_sum' => 'getTotalItemWeightSum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRODUCT_TYPE_GM_PACKET_PLUS = 'GM_PACKET_PLUS';
    public const PRODUCT_TYPE_GM_PACKET_PRIO = 'GM_PACKET_PRIO';
    public const PRODUCT_TYPE_GM_PACKET_STANDARD = 'GM_PACKET_STANDARD';
    public const PRODUCT_TYPE_GM_MAIL_STANDARD = 'GM_MAIL_STANDARD';
    public const PRODUCT_TYPE_GM_MAIL_PRIO = 'GM_MAIL_PRIO';
    public const PRODUCT_TYPE_GM_MAIL_REG = 'GM_MAIL_REG';
    public const PRODUCT_TYPE_GM_PACKET_TRACKED = 'GM_PACKET_TRACKED';
    public const PRODUCT_TYPE_EXPRESS_PACKET_PLUS = 'EXPRESS_PACKET_PLUS';
    public const PRODUCT_TYPE_EXPRESS_PACKET_PRIO = 'EXPRESS_PACKET_PRIO';
    public const PRODUCT_TYPE_EXPRESS_LETTER_PLUS = 'EXPRESS_LETTER_PLUS';
    public const PRODUCT_TYPE_EXPRESS_LETTER_PRIO = 'EXPRESS_LETTER_PRIO';
    public const PRODUCT_TYPE_EXPRESS_PACKET_TRACKED = 'EXPRESS_PACKET_TRACKED';
    public const BULK_ORDER_TYPE_STANDARD = 'STANDARD';
    public const BULK_ORDER_TYPE_MIXED = 'MIXED';
    public const STATUS_EDITING = 'EDITING';
    public const STATUS_SAVED = 'SAVED';
    public const STATUS_LOCKED = 'LOCKED';
    public const STATUS_SUBMITTED = 'SUBMITTED';
    public const STATUS_UNBAGGED = 'UNBAGGED';
    public const ORDER_CLASSIFICATION_BAG = 'BAG';
    public const ORDER_CLASSIFICATION_BULK = 'BULK';
    public const ORDER_CLASSIFICATION_BAG_AND_BULK = 'BAG_AND_BULK';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_GM_PACKET_PLUS,
            self::PRODUCT_TYPE_GM_PACKET_PRIO,
            self::PRODUCT_TYPE_GM_PACKET_STANDARD,
            self::PRODUCT_TYPE_GM_MAIL_STANDARD,
            self::PRODUCT_TYPE_GM_MAIL_PRIO,
            self::PRODUCT_TYPE_GM_MAIL_REG,
            self::PRODUCT_TYPE_GM_PACKET_TRACKED,
            self::PRODUCT_TYPE_EXPRESS_PACKET_PLUS,
            self::PRODUCT_TYPE_EXPRESS_PACKET_PRIO,
            self::PRODUCT_TYPE_EXPRESS_LETTER_PLUS,
            self::PRODUCT_TYPE_EXPRESS_LETTER_PRIO,
            self::PRODUCT_TYPE_EXPRESS_PACKET_TRACKED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBulkOrderTypeAllowableValues()
    {
        return [
            self::BULK_ORDER_TYPE_STANDARD,
            self::BULK_ORDER_TYPE_MIXED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_EDITING,
            self::STATUS_SAVED,
            self::STATUS_LOCKED,
            self::STATUS_SUBMITTED,
            self::STATUS_UNBAGGED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderClassificationAllowableValues()
    {
        return [
            self::ORDER_CLASSIFICATION_BAG,
            self::ORDER_CLASSIFICATION_BULK,
            self::ORDER_CLASSIFICATION_BAG_AND_BULK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('contact_name', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('job_reference', $data ?? [], null);
        $this->setIfExists('product_type', $data ?? [], null);
        $this->setIfExists('bulk_order_type', $data ?? [], null);
        $this->setIfExists('awb', $data ?? [], null);
        $this->setIfExists('bulk_bags', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('validation_errors', $data ?? [], false);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('number_of_copies', $data ?? [], null);
        $this->setIfExists('download_token', $data ?? [], null);
        $this->setIfExists('printable', $data ?? [], null);
        $this->setIfExists('order_classification', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('auth_user', $data ?? [], null);
        $this->setIfExists('send_date', $data ?? [], null);
        $this->setIfExists('submitted_date', $data ?? [], null);
        $this->setIfExists('preadvice_eligible', $data ?? [], null);
        $this->setIfExists('finalised', $data ?? [], null);
        $this->setIfExists('total_item_weight_sum', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product_type', must be one of '%s'",
                $this->container['product_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBulkOrderTypeAllowableValues();
        if (!is_null($this->container['bulk_order_type']) && !in_array($this->container['bulk_order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bulk_order_type', must be one of '%s'",
                $this->container['bulk_order_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderClassificationAllowableValues();
        if (!is_null($this->container['order_classification']) && !in_array($this->container['order_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_classification', must be one of '%s'",
                $this->container['order_classification'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name contact_name
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        if (is_null($contact_name)) {
            throw new \InvalidArgumentException('non-nullable contact_name cannot be null');
        }
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets job_reference
     *
     * @return string|null
     */
    public function getJobReference()
    {
        return $this->container['job_reference'];
    }

    /**
     * Sets job_reference
     *
     * @param string|null $job_reference job_reference
     *
     * @return self
     */
    public function setJobReference($job_reference)
    {
        if (is_null($job_reference)) {
            throw new \InvalidArgumentException('non-nullable job_reference cannot be null');
        }
        $this->container['job_reference'] = $job_reference;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type product_type
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        if (is_null($product_type)) {
            throw new \InvalidArgumentException('non-nullable product_type cannot be null');
        }
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product_type', must be one of '%s'",
                    $product_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets bulk_order_type
     *
     * @return string|null
     */
    public function getBulkOrderType()
    {
        return $this->container['bulk_order_type'];
    }

    /**
     * Sets bulk_order_type
     *
     * @param string|null $bulk_order_type bulk_order_type
     *
     * @return self
     */
    public function setBulkOrderType($bulk_order_type)
    {
        if (is_null($bulk_order_type)) {
            throw new \InvalidArgumentException('non-nullable bulk_order_type cannot be null');
        }
        $allowedValues = $this->getBulkOrderTypeAllowableValues();
        if (!in_array($bulk_order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bulk_order_type', must be one of '%s'",
                    $bulk_order_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bulk_order_type'] = $bulk_order_type;

        return $this;
    }

    /**
     * Gets awb
     *
     * @return string|null
     */
    public function getAwb()
    {
        return $this->container['awb'];
    }

    /**
     * Sets awb
     *
     * @param string|null $awb awb
     *
     * @return self
     */
    public function setAwb($awb)
    {
        if (is_null($awb)) {
            throw new \InvalidArgumentException('non-nullable awb cannot be null');
        }
        $this->container['awb'] = $awb;

        return $this;
    }

    /**
     * Gets bulk_bags
     *
     * @return \Spy\DHLParcel\Model\BulkBagDto[]|null
     */
    public function getBulkBags()
    {
        return $this->container['bulk_bags'];
    }

    /**
     * Sets bulk_bags
     *
     * @param \Spy\DHLParcel\Model\BulkBagDto[]|null $bulk_bags bulk_bags
     *
     * @return self
     */
    public function setBulkBags($bulk_bags)
    {
        if (is_null($bulk_bags)) {
            throw new \InvalidArgumentException('non-nullable bulk_bags cannot be null');
        }
        $this->container['bulk_bags'] = $bulk_bags;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets validation_errors
     *
     * @return bool|null
     */
    public function getValidationErrors()
    {
        return $this->container['validation_errors'];
    }

    /**
     * Sets validation_errors
     *
     * @param bool|null $validation_errors validation_errors
     *
     * @return self
     */
    public function setValidationErrors($validation_errors)
    {
        if (is_null($validation_errors)) {
            throw new \InvalidArgumentException('non-nullable validation_errors cannot be null');
        }
        $this->container['validation_errors'] = $validation_errors;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            throw new \InvalidArgumentException('non-nullable error_message cannot be null');
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets number_of_copies
     *
     * @return int|null
     */
    public function getNumberOfCopies()
    {
        return $this->container['number_of_copies'];
    }

    /**
     * Sets number_of_copies
     *
     * @param int|null $number_of_copies number_of_copies
     *
     * @return self
     */
    public function setNumberOfCopies($number_of_copies)
    {
        if (is_null($number_of_copies)) {
            throw new \InvalidArgumentException('non-nullable number_of_copies cannot be null');
        }
        $this->container['number_of_copies'] = $number_of_copies;

        return $this;
    }

    /**
     * Gets download_token
     *
     * @return string|null
     */
    public function getDownloadToken()
    {
        return $this->container['download_token'];
    }

    /**
     * Sets download_token
     *
     * @param string|null $download_token download_token
     *
     * @return self
     */
    public function setDownloadToken($download_token)
    {
        if (is_null($download_token)) {
            throw new \InvalidArgumentException('non-nullable download_token cannot be null');
        }
        $this->container['download_token'] = $download_token;

        return $this;
    }

    /**
     * Gets printable
     *
     * @return bool|null
     */
    public function getPrintable()
    {
        return $this->container['printable'];
    }

    /**
     * Sets printable
     *
     * @param bool|null $printable printable
     *
     * @return self
     */
    public function setPrintable($printable)
    {
        if (is_null($printable)) {
            throw new \InvalidArgumentException('non-nullable printable cannot be null');
        }
        $this->container['printable'] = $printable;

        return $this;
    }

    /**
     * Gets order_classification
     *
     * @return string|null
     */
    public function getOrderClassification()
    {
        return $this->container['order_classification'];
    }

    /**
     * Sets order_classification
     *
     * @param string|null $order_classification order_classification
     *
     * @return self
     */
    public function setOrderClassification($order_classification)
    {
        if (is_null($order_classification)) {
            throw new \InvalidArgumentException('non-nullable order_classification cannot be null');
        }
        $allowedValues = $this->getOrderClassificationAllowableValues();
        if (!in_array($order_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_classification', must be one of '%s'",
                    $order_classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_classification'] = $order_classification;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets auth_user
     *
     * @return string|null
     */
    public function getAuthUser()
    {
        return $this->container['auth_user'];
    }

    /**
     * Sets auth_user
     *
     * @param string|null $auth_user auth_user
     *
     * @return self
     */
    public function setAuthUser($auth_user)
    {
        if (is_null($auth_user)) {
            throw new \InvalidArgumentException('non-nullable auth_user cannot be null');
        }
        $this->container['auth_user'] = $auth_user;

        return $this;
    }

    /**
     * Gets send_date
     *
     * @return \DateTime|null
     */
    public function getSendDate()
    {
        return $this->container['send_date'];
    }

    /**
     * Sets send_date
     *
     * @param \DateTime|null $send_date send_date
     *
     * @return self
     */
    public function setSendDate($send_date)
    {
        if (is_null($send_date)) {
            throw new \InvalidArgumentException('non-nullable send_date cannot be null');
        }
        $this->container['send_date'] = $send_date;

        return $this;
    }

    /**
     * Gets submitted_date
     *
     * @return \DateTime|null
     */
    public function getSubmittedDate()
    {
        return $this->container['submitted_date'];
    }

    /**
     * Sets submitted_date
     *
     * @param \DateTime|null $submitted_date submitted_date
     *
     * @return self
     */
    public function setSubmittedDate($submitted_date)
    {
        if (is_null($submitted_date)) {
            throw new \InvalidArgumentException('non-nullable submitted_date cannot be null');
        }
        $this->container['submitted_date'] = $submitted_date;

        return $this;
    }

    /**
     * Gets preadvice_eligible
     *
     * @return bool|null
     */
    public function getPreadviceEligible()
    {
        return $this->container['preadvice_eligible'];
    }

    /**
     * Sets preadvice_eligible
     *
     * @param bool|null $preadvice_eligible preadvice_eligible
     *
     * @return self
     */
    public function setPreadviceEligible($preadvice_eligible)
    {
        if (is_null($preadvice_eligible)) {
            throw new \InvalidArgumentException('non-nullable preadvice_eligible cannot be null');
        }
        $this->container['preadvice_eligible'] = $preadvice_eligible;

        return $this;
    }

    /**
     * Gets finalised
     *
     * @return bool|null
     */
    public function getFinalised()
    {
        return $this->container['finalised'];
    }

    /**
     * Sets finalised
     *
     * @param bool|null $finalised finalised
     *
     * @return self
     */
    public function setFinalised($finalised)
    {
        if (is_null($finalised)) {
            throw new \InvalidArgumentException('non-nullable finalised cannot be null');
        }
        $this->container['finalised'] = $finalised;

        return $this;
    }

    /**
     * Gets total_item_weight_sum
     *
     * @return float|null
     */
    public function getTotalItemWeightSum()
    {
        return $this->container['total_item_weight_sum'];
    }

    /**
     * Sets total_item_weight_sum
     *
     * @param float|null $total_item_weight_sum total_item_weight_sum
     *
     * @return self
     */
    public function setTotalItemWeightSum($total_item_weight_sum)
    {
        if (is_null($total_item_weight_sum)) {
            throw new \InvalidArgumentException('non-nullable total_item_weight_sum cannot be null');
        }
        $this->container['total_item_weight_sum'] = $total_item_weight_sum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


