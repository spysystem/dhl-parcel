<?php
/**
 * ClosedBag
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deutsche Post International Shipping API - QA
 *
 * Welcome to the Deutsche Post International API! <br/><br/> This API provides an interface for our shipping and tracking services. It enables open integration channels for our customers and partners.
 *
 * The version of the OpenAPI document: 5.7.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\DHLParcel\Model;

use \ArrayAccess;
use \Spy\DHLParcel\ObjectSerializer;

/**
 * ClosedBag Class Doc Comment
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClosedBag implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ClosedBagModelFields
      */
    public static function GetModelFields(): ClosedBagModelFields
    {
        return new ClosedBagModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ClosedBagModelAttributes
      */
    public static function GetModelAttributes(): ClosedBagModelAttributes
    {
        return new ClosedBagModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClosedBag';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product' => 'string',
        'format' => 'string',
        'service_level' => 'string',
        'destination_country' => 'string',
        'bag_id' => 'string',
        'item_barcodes' => 'string[]',
        'item_count' => 'int',
        'net_bulk_weight_in_kilogram' => 'float',
        'customer_ekp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product' => null,
        'format' => null,
        'service_level' => null,
        'destination_country' => null,
        'bag_id' => null,
        'item_barcodes' => null,
        'item_count' => 'int32',
        'net_bulk_weight_in_kilogram' => 'double',
        'customer_ekp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product' => false,
		'format' => false,
		'service_level' => false,
		'destination_country' => false,
		'bag_id' => false,
		'item_barcodes' => false,
		'item_count' => false,
		'net_bulk_weight_in_kilogram' => false,
		'customer_ekp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'product',
        'format' => 'format',
        'service_level' => 'serviceLevel',
        'destination_country' => 'destinationCountry',
        'bag_id' => 'bagId',
        'item_barcodes' => 'itemBarcodes',
        'item_count' => 'itemCount',
        'net_bulk_weight_in_kilogram' => 'netBulkWeightInKilogram',
        'customer_ekp' => 'customerEkp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
        'format' => 'setFormat',
        'service_level' => 'setServiceLevel',
        'destination_country' => 'setDestinationCountry',
        'bag_id' => 'setBagId',
        'item_barcodes' => 'setItemBarcodes',
        'item_count' => 'setItemCount',
        'net_bulk_weight_in_kilogram' => 'setNetBulkWeightInKilogram',
        'customer_ekp' => 'setCustomerEkp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
        'format' => 'getFormat',
        'service_level' => 'getServiceLevel',
        'destination_country' => 'getDestinationCountry',
        'bag_id' => 'getBagId',
        'item_barcodes' => 'getItemBarcodes',
        'item_count' => 'getItemCount',
        'net_bulk_weight_in_kilogram' => 'getNetBulkWeightInKilogram',
        'customer_ekp' => 'getCustomerEkp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SERVICE_LEVEL_PRIORITY = 'PRIORITY';
    public const SERVICE_LEVEL_STANDARD = 'STANDARD';
    public const SERVICE_LEVEL_REGISTERED = 'REGISTERED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceLevelAllowableValues()
    {
        return [
            self::SERVICE_LEVEL_PRIORITY,
            self::SERVICE_LEVEL_STANDARD,
            self::SERVICE_LEVEL_REGISTERED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('service_level', $data ?? [], null);
        $this->setIfExists('destination_country', $data ?? [], null);
        $this->setIfExists('bag_id', $data ?? [], null);
        $this->setIfExists('item_barcodes', $data ?? [], null);
        $this->setIfExists('item_count', $data ?? [], null);
        $this->setIfExists('net_bulk_weight_in_kilogram', $data ?? [], null);
        $this->setIfExists('customer_ekp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['format'] === null) {
            $invalidProperties[] = "'format' can't be null";
        }
        if (!preg_match("/P_BAG|P_PALLET|G_BAG|G_PALLET|E_BAG|E_PALLET/", $this->container['format'])) {
            $invalidProperties[] = "invalid value for 'format', must be conform to the pattern /P_BAG|P_PALLET|G_BAG|G_PALLET|E_BAG|E_PALLET/.";
        }

        if ($this->container['service_level'] === null) {
            $invalidProperties[] = "'service_level' can't be null";
        }
        $allowedValues = $this->getServiceLevelAllowableValues();
        if (!is_null($this->container['service_level']) && !in_array($this->container['service_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'service_level', must be one of '%s'",
                $this->container['service_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['destination_country'] === null) {
            $invalidProperties[] = "'destination_country' can't be null";
        }
        if ($this->container['item_barcodes'] === null) {
            $invalidProperties[] = "'item_barcodes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product The product that is used for the shipment of this item. Available products are: GMP (Packet), GMM (Business Mail Standard).
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format The format of the content of this bag.
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }

        if ((!preg_match("/P_BAG|P_PALLET|G_BAG|G_PALLET|E_BAG|E_PALLET/", $format))) {
            throw new \InvalidArgumentException("invalid value for \$format when calling ClosedBag., must conform to the pattern /P_BAG|P_PALLET|G_BAG|G_PALLET|E_BAG|E_PALLET/.");
        }

        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets service_level
     *
     * @return string
     */
    public function getServiceLevel()
    {
        return $this->container['service_level'];
    }

    /**
     * Sets service_level
     *
     * @param string $service_level The service level that is used for the shipment of this item. There are restrictions for use of service level: STANDARD is only available with products GMM and GMP, PRIORITY is only available with products GMM and GMP.
     *
     * @return self
     */
    public function setServiceLevel($service_level)
    {
        if (is_null($service_level)) {
            throw new \InvalidArgumentException('non-nullable service_level cannot be null');
        }
        $allowedValues = $this->getServiceLevelAllowableValues();
        if (!in_array($service_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'service_level', must be one of '%s'",
                    $service_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_level'] = $service_level;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string $destination_country The destination country code.
     *
     * @return self
     */
    public function setDestinationCountry($destination_country)
    {
        if (is_null($destination_country)) {
            throw new \InvalidArgumentException('non-nullable destination_country cannot be null');
        }
        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets bag_id
     *
     * @return string|null
     */
    public function getBagId()
    {
        return $this->container['bag_id'];
    }

    /**
     * Sets bag_id
     *
     * @param string|null $bag_id The BagId to track the bag. In requests only applicable for customers using \"prelabelled service\"
     *
     * @return self
     */
    public function setBagId($bag_id)
    {
        if (is_null($bag_id)) {
            throw new \InvalidArgumentException('non-nullable bag_id cannot be null');
        }
        $this->container['bag_id'] = $bag_id;

        return $this;
    }

    /**
     * Gets item_barcodes
     *
     * @return string[]
     */
    public function getItemBarcodes()
    {
        return $this->container['item_barcodes'];
    }

    /**
     * Sets item_barcodes
     *
     * @param string[] $item_barcodes The barcodes of the already created items.
     *
     * @return self
     */
    public function setItemBarcodes($item_barcodes)
    {
        if (is_null($item_barcodes)) {
            throw new \InvalidArgumentException('non-nullable item_barcodes cannot be null');
        }
        $this->container['item_barcodes'] = $item_barcodes;

        return $this;
    }

    /**
     * Gets item_count
     *
     * @return int|null
     */
    public function getItemCount()
    {
        return $this->container['item_count'];
    }

    /**
     * Sets item_count
     *
     * @param int|null $item_count The number of items. This value is only for the response.
     *
     * @return self
     */
    public function setItemCount($item_count)
    {
        if (is_null($item_count)) {
            throw new \InvalidArgumentException('non-nullable item_count cannot be null');
        }
        $this->container['item_count'] = $item_count;

        return $this;
    }

    /**
     * Gets net_bulk_weight_in_kilogram
     *
     * @return float|null
     */
    public function getNetBulkWeightInKilogram()
    {
        return $this->container['net_bulk_weight_in_kilogram'];
    }

    /**
     * Sets net_bulk_weight_in_kilogram
     *
     * @param float|null $net_bulk_weight_in_kilogram The weight of items. This value is only for the response.
     *
     * @return self
     */
    public function setNetBulkWeightInKilogram($net_bulk_weight_in_kilogram)
    {
        if (is_null($net_bulk_weight_in_kilogram)) {
            throw new \InvalidArgumentException('non-nullable net_bulk_weight_in_kilogram cannot be null');
        }
        $this->container['net_bulk_weight_in_kilogram'] = $net_bulk_weight_in_kilogram;

        return $this;
    }

    /**
     * Gets customer_ekp
     *
     * @return string|null
     */
    public function getCustomerEkp()
    {
        return $this->container['customer_ekp'];
    }

    /**
     * Sets customer_ekp
     *
     * @param string|null $customer_ekp The customer ekp. This value is only for the response.
     *
     * @return self
     */
    public function setCustomerEkp($customer_ekp)
    {
        if (is_null($customer_ekp)) {
            throw new \InvalidArgumentException('non-nullable customer_ekp cannot be null');
        }
        $this->container['customer_ekp'] = $customer_ekp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


