<?php
/**
 * V3Tracking
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deutsche Post International Shipping API - QA
 *
 * Welcome to the Deutsche Post International API! <br/><br/> This API provides an interface for our shipping and tracking services. It enables open integration channels for our customers and partners.
 *
 * The version of the OpenAPI document: 5.7.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\DHLParcel\Model;

use \ArrayAccess;
use \Spy\DHLParcel\ObjectSerializer;

/**
 * V3Tracking Class Doc Comment
 *
 * @category Class
 * @description Version 3
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V3Tracking implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return V3TrackingModelFields
      */
    public static function GetModelFields(): V3TrackingModelFields
    {
        return new V3TrackingModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return V3TrackingModelAttributes
      */
    public static function GetModelAttributes(): V3TrackingModelAttributes
    {
        return new V3TrackingModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v3_Tracking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'awb' => 'string',
        'barcode' => 'string',
        'events' => '\Spy\DHLParcel\Model\V3TrackingEvent[]',
        'from_city' => 'string',
        'from_country' => 'string',
        'from_name' => 'string',
        'from_zip' => 'string',
        'public_url' => 'string',
        'to_city' => 'string',
        'to_country' => 'string',
        'to_name' => 'string',
        'to_zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'awb' => null,
        'barcode' => null,
        'events' => null,
        'from_city' => null,
        'from_country' => null,
        'from_name' => null,
        'from_zip' => null,
        'public_url' => null,
        'to_city' => null,
        'to_country' => null,
        'to_name' => null,
        'to_zip' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'awb' => false,
		'barcode' => false,
		'events' => false,
		'from_city' => false,
		'from_country' => false,
		'from_name' => false,
		'from_zip' => false,
		'public_url' => false,
		'to_city' => false,
		'to_country' => false,
		'to_name' => false,
		'to_zip' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'awb' => 'awb',
        'barcode' => 'barcode',
        'events' => 'events',
        'from_city' => 'fromCity',
        'from_country' => 'fromCountry',
        'from_name' => 'fromName',
        'from_zip' => 'fromZip',
        'public_url' => 'publicUrl',
        'to_city' => 'toCity',
        'to_country' => 'toCountry',
        'to_name' => 'toName',
        'to_zip' => 'toZip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'awb' => 'setAwb',
        'barcode' => 'setBarcode',
        'events' => 'setEvents',
        'from_city' => 'setFromCity',
        'from_country' => 'setFromCountry',
        'from_name' => 'setFromName',
        'from_zip' => 'setFromZip',
        'public_url' => 'setPublicUrl',
        'to_city' => 'setToCity',
        'to_country' => 'setToCountry',
        'to_name' => 'setToName',
        'to_zip' => 'setToZip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'awb' => 'getAwb',
        'barcode' => 'getBarcode',
        'events' => 'getEvents',
        'from_city' => 'getFromCity',
        'from_country' => 'getFromCountry',
        'from_name' => 'getFromName',
        'from_zip' => 'getFromZip',
        'public_url' => 'getPublicUrl',
        'to_city' => 'getToCity',
        'to_country' => 'getToCountry',
        'to_name' => 'getToName',
        'to_zip' => 'getToZip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('awb', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('from_city', $data ?? [], null);
        $this->setIfExists('from_country', $data ?? [], null);
        $this->setIfExists('from_name', $data ?? [], null);
        $this->setIfExists('from_zip', $data ?? [], null);
        $this->setIfExists('public_url', $data ?? [], null);
        $this->setIfExists('to_city', $data ?? [], null);
        $this->setIfExists('to_country', $data ?? [], null);
        $this->setIfExists('to_name', $data ?? [], null);
        $this->setIfExists('to_zip', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['awb'] === null) {
            $invalidProperties[] = "'awb' can't be null";
        }
        if ($this->container['barcode'] === null) {
            $invalidProperties[] = "'barcode' can't be null";
        }
        if ($this->container['events'] === null) {
            $invalidProperties[] = "'events' can't be null";
        }
        if ($this->container['public_url'] === null) {
            $invalidProperties[] = "'public_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets awb
     *
     * @return string
     */
    public function getAwb()
    {
        return $this->container['awb'];
    }

    /**
     * Sets awb
     *
     * @param string $awb AWB number
     *
     * @return self
     */
    public function setAwb($awb)
    {
        if (is_null($awb)) {
            throw new \InvalidArgumentException('non-nullable awb cannot be null');
        }
        $this->container['awb'] = $awb;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode Barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Spy\DHLParcel\Model\V3TrackingEvent[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Spy\DHLParcel\Model\V3TrackingEvent[] $events All events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets from_city
     *
     * @return string|null
     */
    public function getFromCity()
    {
        return $this->container['from_city'];
    }

    /**
     * Sets from_city
     *
     * @param string|null $from_city Sender city
     *
     * @return self
     */
    public function setFromCity($from_city)
    {
        if (is_null($from_city)) {
            throw new \InvalidArgumentException('non-nullable from_city cannot be null');
        }
        $this->container['from_city'] = $from_city;

        return $this;
    }

    /**
     * Gets from_country
     *
     * @return string|null
     */
    public function getFromCountry()
    {
        return $this->container['from_country'];
    }

    /**
     * Sets from_country
     *
     * @param string|null $from_country Sender country
     *
     * @return self
     */
    public function setFromCountry($from_country)
    {
        if (is_null($from_country)) {
            throw new \InvalidArgumentException('non-nullable from_country cannot be null');
        }
        $this->container['from_country'] = $from_country;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string|null
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string|null $from_name Sender name
     *
     * @return self
     */
    public function setFromName($from_name)
    {
        if (is_null($from_name)) {
            throw new \InvalidArgumentException('non-nullable from_name cannot be null');
        }
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets from_zip
     *
     * @return string|null
     */
    public function getFromZip()
    {
        return $this->container['from_zip'];
    }

    /**
     * Sets from_zip
     *
     * @param string|null $from_zip Sender zip code
     *
     * @return self
     */
    public function setFromZip($from_zip)
    {
        if (is_null($from_zip)) {
            throw new \InvalidArgumentException('non-nullable from_zip cannot be null');
        }
        $this->container['from_zip'] = $from_zip;

        return $this;
    }

    /**
     * Gets public_url
     *
     * @return string
     */
    public function getPublicUrl()
    {
        return $this->container['public_url'];
    }

    /**
     * Sets public_url
     *
     * @param string $public_url Public URL
     *
     * @return self
     */
    public function setPublicUrl($public_url)
    {
        if (is_null($public_url)) {
            throw new \InvalidArgumentException('non-nullable public_url cannot be null');
        }
        $this->container['public_url'] = $public_url;

        return $this;
    }

    /**
     * Gets to_city
     *
     * @return string|null
     */
    public function getToCity()
    {
        return $this->container['to_city'];
    }

    /**
     * Sets to_city
     *
     * @param string|null $to_city Recipient city
     *
     * @return self
     */
    public function setToCity($to_city)
    {
        if (is_null($to_city)) {
            throw new \InvalidArgumentException('non-nullable to_city cannot be null');
        }
        $this->container['to_city'] = $to_city;

        return $this;
    }

    /**
     * Gets to_country
     *
     * @return string|null
     */
    public function getToCountry()
    {
        return $this->container['to_country'];
    }

    /**
     * Sets to_country
     *
     * @param string|null $to_country Recipient country
     *
     * @return self
     */
    public function setToCountry($to_country)
    {
        if (is_null($to_country)) {
            throw new \InvalidArgumentException('non-nullable to_country cannot be null');
        }
        $this->container['to_country'] = $to_country;

        return $this;
    }

    /**
     * Gets to_name
     *
     * @return string|null
     */
    public function getToName()
    {
        return $this->container['to_name'];
    }

    /**
     * Sets to_name
     *
     * @param string|null $to_name Recipient name
     *
     * @return self
     */
    public function setToName($to_name)
    {
        if (is_null($to_name)) {
            throw new \InvalidArgumentException('non-nullable to_name cannot be null');
        }
        $this->container['to_name'] = $to_name;

        return $this;
    }

    /**
     * Gets to_zip
     *
     * @return string|null
     */
    public function getToZip()
    {
        return $this->container['to_zip'];
    }

    /**
     * Sets to_zip
     *
     * @param string|null $to_zip Recipient zip code
     *
     * @return self
     */
    public function setToZip($to_zip)
    {
        if (is_null($to_zip)) {
            throw new \InvalidArgumentException('non-nullable to_zip cannot be null');
        }
        $this->container['to_zip'] = $to_zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


