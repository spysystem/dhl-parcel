<?php
/**
 * BagItemDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deutsche Post International Shipping API - QA
 *
 * Welcome to the Deutsche Post International API! <br/><br/> This API provides an interface for our shipping and tracking services. It enables open integration channels for our customers and partners.
 *
 * The version of the OpenAPI document: 5.7.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\DHLParcel\Model;

use \ArrayAccess;
use \Spy\DHLParcel\ObjectSerializer;

/**
 * BagItemDto Class Doc Comment
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BagItemDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return BagItemDtoModelFields
      */
    public static function GetModelFields(): BagItemDtoModelFields
    {
        return new BagItemDtoModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return BagItemDtoModelAttributes
      */
    public static function GetModelAttributes(): BagItemDtoModelAttributes
    {
        return new BagItemDtoModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BagItemDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'barcode' => 'string',
        'customer_ekp' => 'string',
        'awb' => 'string',
        'destination_country' => '\Spy\DHLParcel\Model\Country',
        'destination_email' => 'string',
        'destination_phone' => 'string',
        'destination_phone2' => 'string',
        'format' => 'string',
        'item_weight' => 'int',
        'bag_id' => 'string',
        'product_type' => 'string',
        'product' => 'string',
        'service_level' => 'string',
        'name' => 'string',
        'customer_reference' => 'string',
        'recipient_phone' => 'string',
        'recipient_email' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_line3' => 'string',
        'city' => 'string',
        'destination_state' => 'string',
        'postal_code' => 'string',
        'currency' => 'string',
        'content_type' => 'string',
        'declared_content_amount' => 'int',
        'detailed_content_descriptions1' => 'string',
        'total_value' => 'int',
        'return_label' => 'bool',
        'sender_customs_reference' => 'string',
        'importer_customs_reference' => 'string',
        'checked' => 'bool',
        'bag_item_contents' => '\Spy\DHLParcel\Model\BagItemContentDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'barcode' => null,
        'customer_ekp' => null,
        'awb' => null,
        'destination_country' => null,
        'destination_email' => null,
        'destination_phone' => null,
        'destination_phone2' => null,
        'format' => null,
        'item_weight' => 'int64',
        'bag_id' => null,
        'product_type' => null,
        'product' => null,
        'service_level' => null,
        'name' => null,
        'customer_reference' => null,
        'recipient_phone' => null,
        'recipient_email' => null,
        'address_line1' => null,
        'address_line2' => null,
        'address_line3' => null,
        'city' => null,
        'destination_state' => null,
        'postal_code' => null,
        'currency' => null,
        'content_type' => null,
        'declared_content_amount' => 'int32',
        'detailed_content_descriptions1' => null,
        'total_value' => 'int64',
        'return_label' => null,
        'sender_customs_reference' => null,
        'importer_customs_reference' => null,
        'checked' => null,
        'bag_item_contents' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'barcode' => false,
		'customer_ekp' => false,
		'awb' => false,
		'destination_country' => false,
		'destination_email' => false,
		'destination_phone' => false,
		'destination_phone2' => false,
		'format' => false,
		'item_weight' => false,
		'bag_id' => false,
		'product_type' => false,
		'product' => false,
		'service_level' => false,
		'name' => false,
		'customer_reference' => false,
		'recipient_phone' => false,
		'recipient_email' => false,
		'address_line1' => false,
		'address_line2' => false,
		'address_line3' => false,
		'city' => false,
		'destination_state' => false,
		'postal_code' => false,
		'currency' => false,
		'content_type' => false,
		'declared_content_amount' => false,
		'detailed_content_descriptions1' => false,
		'total_value' => false,
		'return_label' => false,
		'sender_customs_reference' => false,
		'importer_customs_reference' => false,
		'checked' => false,
		'bag_item_contents' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'barcode' => 'barcode',
        'customer_ekp' => 'customerEkp',
        'awb' => 'awb',
        'destination_country' => 'destinationCountry',
        'destination_email' => 'destinationEmail',
        'destination_phone' => 'destinationPhone',
        'destination_phone2' => 'destinationPhone2',
        'format' => 'format',
        'item_weight' => 'itemWeight',
        'bag_id' => 'bagId',
        'product_type' => 'productType',
        'product' => 'product',
        'service_level' => 'serviceLevel',
        'name' => 'name',
        'customer_reference' => 'customerReference',
        'recipient_phone' => 'recipientPhone',
        'recipient_email' => 'recipientEmail',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'address_line3' => 'addressLine3',
        'city' => 'city',
        'destination_state' => 'destinationState',
        'postal_code' => 'postalCode',
        'currency' => 'currency',
        'content_type' => 'contentType',
        'declared_content_amount' => 'declaredContentAmount',
        'detailed_content_descriptions1' => 'detailedContentDescriptions1',
        'total_value' => 'totalValue',
        'return_label' => 'returnLabel',
        'sender_customs_reference' => 'senderCustomsReference',
        'importer_customs_reference' => 'importerCustomsReference',
        'checked' => 'checked',
        'bag_item_contents' => 'bagItemContents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'barcode' => 'setBarcode',
        'customer_ekp' => 'setCustomerEkp',
        'awb' => 'setAwb',
        'destination_country' => 'setDestinationCountry',
        'destination_email' => 'setDestinationEmail',
        'destination_phone' => 'setDestinationPhone',
        'destination_phone2' => 'setDestinationPhone2',
        'format' => 'setFormat',
        'item_weight' => 'setItemWeight',
        'bag_id' => 'setBagId',
        'product_type' => 'setProductType',
        'product' => 'setProduct',
        'service_level' => 'setServiceLevel',
        'name' => 'setName',
        'customer_reference' => 'setCustomerReference',
        'recipient_phone' => 'setRecipientPhone',
        'recipient_email' => 'setRecipientEmail',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_line3' => 'setAddressLine3',
        'city' => 'setCity',
        'destination_state' => 'setDestinationState',
        'postal_code' => 'setPostalCode',
        'currency' => 'setCurrency',
        'content_type' => 'setContentType',
        'declared_content_amount' => 'setDeclaredContentAmount',
        'detailed_content_descriptions1' => 'setDetailedContentDescriptions1',
        'total_value' => 'setTotalValue',
        'return_label' => 'setReturnLabel',
        'sender_customs_reference' => 'setSenderCustomsReference',
        'importer_customs_reference' => 'setImporterCustomsReference',
        'checked' => 'setChecked',
        'bag_item_contents' => 'setBagItemContents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'barcode' => 'getBarcode',
        'customer_ekp' => 'getCustomerEkp',
        'awb' => 'getAwb',
        'destination_country' => 'getDestinationCountry',
        'destination_email' => 'getDestinationEmail',
        'destination_phone' => 'getDestinationPhone',
        'destination_phone2' => 'getDestinationPhone2',
        'format' => 'getFormat',
        'item_weight' => 'getItemWeight',
        'bag_id' => 'getBagId',
        'product_type' => 'getProductType',
        'product' => 'getProduct',
        'service_level' => 'getServiceLevel',
        'name' => 'getName',
        'customer_reference' => 'getCustomerReference',
        'recipient_phone' => 'getRecipientPhone',
        'recipient_email' => 'getRecipientEmail',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_line3' => 'getAddressLine3',
        'city' => 'getCity',
        'destination_state' => 'getDestinationState',
        'postal_code' => 'getPostalCode',
        'currency' => 'getCurrency',
        'content_type' => 'getContentType',
        'declared_content_amount' => 'getDeclaredContentAmount',
        'detailed_content_descriptions1' => 'getDetailedContentDescriptions1',
        'total_value' => 'getTotalValue',
        'return_label' => 'getReturnLabel',
        'sender_customs_reference' => 'getSenderCustomsReference',
        'importer_customs_reference' => 'getImporterCustomsReference',
        'checked' => 'getChecked',
        'bag_item_contents' => 'getBagItemContents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FORMAT_P = 'P';
    public const FORMAT_G = 'G';
    public const FORMAT_E = 'E';
    public const FORMAT_MIXED = 'MIXED';
    public const FORMAT_P_BAG = 'P_BAG';
    public const FORMAT_G_BAG = 'G_BAG';
    public const FORMAT_E_BAG = 'E_BAG';
    public const FORMAT_P_PALLET = 'P_PALLET';
    public const FORMAT_G_PALLET = 'G_PALLET';
    public const FORMAT_E_PALLET = 'E_PALLET';
    public const PRODUCT_TYPE_GM_PACKET_PLUS = 'GM_PACKET_PLUS';
    public const PRODUCT_TYPE_GM_PACKET_PRIO = 'GM_PACKET_PRIO';
    public const PRODUCT_TYPE_GM_PACKET_STANDARD = 'GM_PACKET_STANDARD';
    public const PRODUCT_TYPE_GM_MAIL_STANDARD = 'GM_MAIL_STANDARD';
    public const PRODUCT_TYPE_GM_MAIL_PRIO = 'GM_MAIL_PRIO';
    public const PRODUCT_TYPE_GM_MAIL_REG = 'GM_MAIL_REG';
    public const PRODUCT_TYPE_GM_PACKET_TRACKED = 'GM_PACKET_TRACKED';
    public const PRODUCT_TYPE_EXPRESS_PACKET_PLUS = 'EXPRESS_PACKET_PLUS';
    public const PRODUCT_TYPE_EXPRESS_PACKET_PRIO = 'EXPRESS_PACKET_PRIO';
    public const PRODUCT_TYPE_EXPRESS_LETTER_PLUS = 'EXPRESS_LETTER_PLUS';
    public const PRODUCT_TYPE_EXPRESS_LETTER_PRIO = 'EXPRESS_LETTER_PRIO';
    public const PRODUCT_TYPE_EXPRESS_PACKET_TRACKED = 'EXPRESS_PACKET_TRACKED';
    public const PRODUCT_GM_PACKET_PLUS = 'GM_PACKET_PLUS';
    public const PRODUCT_GM_PACKET = 'GM_PACKET';
    public const PRODUCT_GM_MAIL = 'GM_MAIL';
    public const PRODUCT_GM_PACKET_TRACKED = 'GM_PACKET_TRACKED';
    public const PRODUCT_EXPRESS_PACKET_PLUS = 'EXPRESS_PACKET_PLUS';
    public const PRODUCT_EXPRESS_PACKET_PRIO = 'EXPRESS_PACKET_PRIO';
    public const PRODUCT_EXPRESS_LETTER_PLUS = 'EXPRESS_LETTER_PLUS';
    public const PRODUCT_EXPRESS_LETTER_PRIO = 'EXPRESS_LETTER_PRIO';
    public const PRODUCT_EXPRESS_PACKET_TRACKED = 'EXPRESS_PACKET_TRACKED';
    public const SERVICE_LEVEL_STANDARD = 'STANDARD';
    public const SERVICE_LEVEL_PRIORITY = 'PRIORITY';
    public const SERVICE_LEVEL_REGISTERED = 'REGISTERED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_P,
            self::FORMAT_G,
            self::FORMAT_E,
            self::FORMAT_MIXED,
            self::FORMAT_P_BAG,
            self::FORMAT_G_BAG,
            self::FORMAT_E_BAG,
            self::FORMAT_P_PALLET,
            self::FORMAT_G_PALLET,
            self::FORMAT_E_PALLET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_GM_PACKET_PLUS,
            self::PRODUCT_TYPE_GM_PACKET_PRIO,
            self::PRODUCT_TYPE_GM_PACKET_STANDARD,
            self::PRODUCT_TYPE_GM_MAIL_STANDARD,
            self::PRODUCT_TYPE_GM_MAIL_PRIO,
            self::PRODUCT_TYPE_GM_MAIL_REG,
            self::PRODUCT_TYPE_GM_PACKET_TRACKED,
            self::PRODUCT_TYPE_EXPRESS_PACKET_PLUS,
            self::PRODUCT_TYPE_EXPRESS_PACKET_PRIO,
            self::PRODUCT_TYPE_EXPRESS_LETTER_PLUS,
            self::PRODUCT_TYPE_EXPRESS_LETTER_PRIO,
            self::PRODUCT_TYPE_EXPRESS_PACKET_TRACKED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductAllowableValues()
    {
        return [
            self::PRODUCT_GM_PACKET_PLUS,
            self::PRODUCT_GM_PACKET,
            self::PRODUCT_GM_MAIL,
            self::PRODUCT_GM_PACKET_TRACKED,
            self::PRODUCT_EXPRESS_PACKET_PLUS,
            self::PRODUCT_EXPRESS_PACKET_PRIO,
            self::PRODUCT_EXPRESS_LETTER_PLUS,
            self::PRODUCT_EXPRESS_LETTER_PRIO,
            self::PRODUCT_EXPRESS_PACKET_TRACKED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceLevelAllowableValues()
    {
        return [
            self::SERVICE_LEVEL_STANDARD,
            self::SERVICE_LEVEL_PRIORITY,
            self::SERVICE_LEVEL_REGISTERED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('customer_ekp', $data ?? [], null);
        $this->setIfExists('awb', $data ?? [], null);
        $this->setIfExists('destination_country', $data ?? [], null);
        $this->setIfExists('destination_email', $data ?? [], null);
        $this->setIfExists('destination_phone', $data ?? [], null);
        $this->setIfExists('destination_phone2', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('item_weight', $data ?? [], null);
        $this->setIfExists('bag_id', $data ?? [], null);
        $this->setIfExists('product_type', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('service_level', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('customer_reference', $data ?? [], null);
        $this->setIfExists('recipient_phone', $data ?? [], null);
        $this->setIfExists('recipient_email', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('address_line3', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('destination_state', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('content_type', $data ?? [], null);
        $this->setIfExists('declared_content_amount', $data ?? [], null);
        $this->setIfExists('detailed_content_descriptions1', $data ?? [], null);
        $this->setIfExists('total_value', $data ?? [], null);
        $this->setIfExists('return_label', $data ?? [], null);
        $this->setIfExists('sender_customs_reference', $data ?? [], null);
        $this->setIfExists('importer_customs_reference', $data ?? [], null);
        $this->setIfExists('checked', $data ?? [], null);
        $this->setIfExists('bag_item_contents', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'format', must be one of '%s'",
                $this->container['format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product_type', must be one of '%s'",
                $this->container['product_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProductAllowableValues();
        if (!is_null($this->container['product']) && !in_array($this->container['product'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product', must be one of '%s'",
                $this->container['product'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getServiceLevelAllowableValues();
        if (!is_null($this->container['service_level']) && !in_array($this->container['service_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'service_level', must be one of '%s'",
                $this->container['service_level'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets customer_ekp
     *
     * @return string|null
     */
    public function getCustomerEkp()
    {
        return $this->container['customer_ekp'];
    }

    /**
     * Sets customer_ekp
     *
     * @param string|null $customer_ekp customer_ekp
     *
     * @return self
     */
    public function setCustomerEkp($customer_ekp)
    {
        if (is_null($customer_ekp)) {
            throw new \InvalidArgumentException('non-nullable customer_ekp cannot be null');
        }
        $this->container['customer_ekp'] = $customer_ekp;

        return $this;
    }

    /**
     * Gets awb
     *
     * @return string|null
     */
    public function getAwb()
    {
        return $this->container['awb'];
    }

    /**
     * Sets awb
     *
     * @param string|null $awb awb
     *
     * @return self
     */
    public function setAwb($awb)
    {
        if (is_null($awb)) {
            throw new \InvalidArgumentException('non-nullable awb cannot be null');
        }
        $this->container['awb'] = $awb;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return \Spy\DHLParcel\Model\Country|null
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param \Spy\DHLParcel\Model\Country|null $destination_country destination_country
     *
     * @return self
     */
    public function setDestinationCountry($destination_country)
    {
        if (is_null($destination_country)) {
            throw new \InvalidArgumentException('non-nullable destination_country cannot be null');
        }
        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets destination_email
     *
     * @return string|null
     */
    public function getDestinationEmail()
    {
        return $this->container['destination_email'];
    }

    /**
     * Sets destination_email
     *
     * @param string|null $destination_email destination_email
     *
     * @return self
     */
    public function setDestinationEmail($destination_email)
    {
        if (is_null($destination_email)) {
            throw new \InvalidArgumentException('non-nullable destination_email cannot be null');
        }
        $this->container['destination_email'] = $destination_email;

        return $this;
    }

    /**
     * Gets destination_phone
     *
     * @return string|null
     */
    public function getDestinationPhone()
    {
        return $this->container['destination_phone'];
    }

    /**
     * Sets destination_phone
     *
     * @param string|null $destination_phone destination_phone
     *
     * @return self
     */
    public function setDestinationPhone($destination_phone)
    {
        if (is_null($destination_phone)) {
            throw new \InvalidArgumentException('non-nullable destination_phone cannot be null');
        }
        $this->container['destination_phone'] = $destination_phone;

        return $this;
    }

    /**
     * Gets destination_phone2
     *
     * @return string|null
     */
    public function getDestinationPhone2()
    {
        return $this->container['destination_phone2'];
    }

    /**
     * Sets destination_phone2
     *
     * @param string|null $destination_phone2 destination_phone2
     *
     * @return self
     */
    public function setDestinationPhone2($destination_phone2)
    {
        if (is_null($destination_phone2)) {
            throw new \InvalidArgumentException('non-nullable destination_phone2 cannot be null');
        }
        $this->container['destination_phone2'] = $destination_phone2;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $allowedValues = $this->getFormatAllowableValues();
        if (!in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'format', must be one of '%s'",
                    $format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets item_weight
     *
     * @return int|null
     */
    public function getItemWeight()
    {
        return $this->container['item_weight'];
    }

    /**
     * Sets item_weight
     *
     * @param int|null $item_weight item_weight
     *
     * @return self
     */
    public function setItemWeight($item_weight)
    {
        if (is_null($item_weight)) {
            throw new \InvalidArgumentException('non-nullable item_weight cannot be null');
        }
        $this->container['item_weight'] = $item_weight;

        return $this;
    }

    /**
     * Gets bag_id
     *
     * @return string|null
     */
    public function getBagId()
    {
        return $this->container['bag_id'];
    }

    /**
     * Sets bag_id
     *
     * @param string|null $bag_id In requests only applicable for customers using \"prelabelled service\"
     *
     * @return self
     */
    public function setBagId($bag_id)
    {
        if (is_null($bag_id)) {
            throw new \InvalidArgumentException('non-nullable bag_id cannot be null');
        }
        $this->container['bag_id'] = $bag_id;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type product_type
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        if (is_null($product_type)) {
            throw new \InvalidArgumentException('non-nullable product_type cannot be null');
        }
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product_type', must be one of '%s'",
                    $product_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $allowedValues = $this->getProductAllowableValues();
        if (!in_array($product, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product', must be one of '%s'",
                    $product,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets service_level
     *
     * @return string|null
     */
    public function getServiceLevel()
    {
        return $this->container['service_level'];
    }

    /**
     * Sets service_level
     *
     * @param string|null $service_level service_level
     *
     * @return self
     */
    public function setServiceLevel($service_level)
    {
        if (is_null($service_level)) {
            throw new \InvalidArgumentException('non-nullable service_level cannot be null');
        }
        $allowedValues = $this->getServiceLevelAllowableValues();
        if (!in_array($service_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'service_level', must be one of '%s'",
                    $service_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_level'] = $service_level;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string|null
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string|null $customer_reference customer_reference
     *
     * @return self
     */
    public function setCustomerReference($customer_reference)
    {
        if (is_null($customer_reference)) {
            throw new \InvalidArgumentException('non-nullable customer_reference cannot be null');
        }
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets recipient_phone
     *
     * @return string|null
     */
    public function getRecipientPhone()
    {
        return $this->container['recipient_phone'];
    }

    /**
     * Sets recipient_phone
     *
     * @param string|null $recipient_phone recipient_phone
     *
     * @return self
     */
    public function setRecipientPhone($recipient_phone)
    {
        if (is_null($recipient_phone)) {
            throw new \InvalidArgumentException('non-nullable recipient_phone cannot be null');
        }
        $this->container['recipient_phone'] = $recipient_phone;

        return $this;
    }

    /**
     * Gets recipient_email
     *
     * @return string|null
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     *
     * @param string|null $recipient_email recipient_email
     *
     * @return self
     */
    public function setRecipientEmail($recipient_email)
    {
        if (is_null($recipient_email)) {
            throw new \InvalidArgumentException('non-nullable recipient_email cannot be null');
        }
        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 address_line1
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            throw new \InvalidArgumentException('non-nullable address_line1 cannot be null');
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 address_line2
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            throw new \InvalidArgumentException('non-nullable address_line2 cannot be null');
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_line3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->container['address_line3'];
    }

    /**
     * Sets address_line3
     *
     * @param string|null $address_line3 address_line3
     *
     * @return self
     */
    public function setAddressLine3($address_line3)
    {
        if (is_null($address_line3)) {
            throw new \InvalidArgumentException('non-nullable address_line3 cannot be null');
        }
        $this->container['address_line3'] = $address_line3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets destination_state
     *
     * @return string|null
     */
    public function getDestinationState()
    {
        return $this->container['destination_state'];
    }

    /**
     * Sets destination_state
     *
     * @param string|null $destination_state destination_state
     *
     * @return self
     */
    public function setDestinationState($destination_state)
    {
        if (is_null($destination_state)) {
            throw new \InvalidArgumentException('non-nullable destination_state cannot be null');
        }
        $this->container['destination_state'] = $destination_state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string|null
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string|null $content_type content_type
     *
     * @return self
     */
    public function setContentType($content_type)
    {
        if (is_null($content_type)) {
            throw new \InvalidArgumentException('non-nullable content_type cannot be null');
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets declared_content_amount
     *
     * @return int|null
     */
    public function getDeclaredContentAmount()
    {
        return $this->container['declared_content_amount'];
    }

    /**
     * Sets declared_content_amount
     *
     * @param int|null $declared_content_amount declared_content_amount
     *
     * @return self
     */
    public function setDeclaredContentAmount($declared_content_amount)
    {
        if (is_null($declared_content_amount)) {
            throw new \InvalidArgumentException('non-nullable declared_content_amount cannot be null');
        }
        $this->container['declared_content_amount'] = $declared_content_amount;

        return $this;
    }

    /**
     * Gets detailed_content_descriptions1
     *
     * @return string|null
     */
    public function getDetailedContentDescriptions1()
    {
        return $this->container['detailed_content_descriptions1'];
    }

    /**
     * Sets detailed_content_descriptions1
     *
     * @param string|null $detailed_content_descriptions1 detailed_content_descriptions1
     *
     * @return self
     */
    public function setDetailedContentDescriptions1($detailed_content_descriptions1)
    {
        if (is_null($detailed_content_descriptions1)) {
            throw new \InvalidArgumentException('non-nullable detailed_content_descriptions1 cannot be null');
        }
        $this->container['detailed_content_descriptions1'] = $detailed_content_descriptions1;

        return $this;
    }

    /**
     * Gets total_value
     *
     * @return int|null
     */
    public function getTotalValue()
    {
        return $this->container['total_value'];
    }

    /**
     * Sets total_value
     *
     * @param int|null $total_value total_value
     *
     * @return self
     */
    public function setTotalValue($total_value)
    {
        if (is_null($total_value)) {
            throw new \InvalidArgumentException('non-nullable total_value cannot be null');
        }
        $this->container['total_value'] = $total_value;

        return $this;
    }

    /**
     * Gets return_label
     *
     * @return bool|null
     */
    public function getReturnLabel()
    {
        return $this->container['return_label'];
    }

    /**
     * Sets return_label
     *
     * @param bool|null $return_label return_label
     *
     * @return self
     */
    public function setReturnLabel($return_label)
    {
        if (is_null($return_label)) {
            throw new \InvalidArgumentException('non-nullable return_label cannot be null');
        }
        $this->container['return_label'] = $return_label;

        return $this;
    }

    /**
     * Gets sender_customs_reference
     *
     * @return string|null
     */
    public function getSenderCustomsReference()
    {
        return $this->container['sender_customs_reference'];
    }

    /**
     * Sets sender_customs_reference
     *
     * @param string|null $sender_customs_reference sender_customs_reference
     *
     * @return self
     */
    public function setSenderCustomsReference($sender_customs_reference)
    {
        if (is_null($sender_customs_reference)) {
            throw new \InvalidArgumentException('non-nullable sender_customs_reference cannot be null');
        }
        $this->container['sender_customs_reference'] = $sender_customs_reference;

        return $this;
    }

    /**
     * Gets importer_customs_reference
     *
     * @return string|null
     */
    public function getImporterCustomsReference()
    {
        return $this->container['importer_customs_reference'];
    }

    /**
     * Sets importer_customs_reference
     *
     * @param string|null $importer_customs_reference importer_customs_reference
     *
     * @return self
     */
    public function setImporterCustomsReference($importer_customs_reference)
    {
        if (is_null($importer_customs_reference)) {
            throw new \InvalidArgumentException('non-nullable importer_customs_reference cannot be null');
        }
        $this->container['importer_customs_reference'] = $importer_customs_reference;

        return $this;
    }

    /**
     * Gets checked
     *
     * @return bool|null
     */
    public function getChecked()
    {
        return $this->container['checked'];
    }

    /**
     * Sets checked
     *
     * @param bool|null $checked checked
     *
     * @return self
     */
    public function setChecked($checked)
    {
        if (is_null($checked)) {
            throw new \InvalidArgumentException('non-nullable checked cannot be null');
        }
        $this->container['checked'] = $checked;

        return $this;
    }

    /**
     * Gets bag_item_contents
     *
     * @return \Spy\DHLParcel\Model\BagItemContentDto[]|null
     */
    public function getBagItemContents()
    {
        return $this->container['bag_item_contents'];
    }

    /**
     * Sets bag_item_contents
     *
     * @param \Spy\DHLParcel\Model\BagItemContentDto[]|null $bag_item_contents bag_item_contents
     *
     * @return self
     */
    public function setBagItemContents($bag_item_contents)
    {
        if (is_null($bag_item_contents)) {
            throw new \InvalidArgumentException('non-nullable bag_item_contents cannot be null');
        }
        $this->container['bag_item_contents'] = $bag_item_contents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


