<?php
/**
 * Item
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deutsche Post International Shipping API - QA
 *
 * Welcome to the Deutsche Post International API! <br/><br/> This API provides an interface for our shipping and tracking services. It enables open integration channels for our customers and partners.
 *
 * The version of the OpenAPI document: 5.7.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\DHLParcel\Model;

use \ArrayAccess;
use \Spy\DHLParcel\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Item implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ItemModelFields
      */
    public static function GetModelFields(): ItemModelFields
    {
        return new ItemModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ItemModelAttributes
      */
    public static function GetModelAttributes(): ItemModelAttributes
    {
        return new ItemModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_line3' => 'string',
        'barcode' => 'string',
        'city' => 'string',
        'contents' => '\Spy\DHLParcel\Model\Content[]',
        'cust_ref' => 'string',
        'cust_ref2' => 'string',
        'cust_ref3' => 'string',
        'destination_country' => 'string',
        'id' => 'int',
        'postal_code' => 'string',
        'product' => 'string',
        'importer_tax_id' => 'string',
        'recipient' => 'string',
        'recipient_email' => 'string',
        'recipient_fax' => 'string',
        'recipient_phone' => 'string',
        'return_item_wanted' => 'bool',
        'p_ddp' => 'bool',
        'sender_address_line1' => 'string',
        'sender_address_line2' => 'string',
        'sender_city' => 'string',
        'sender_country' => 'string',
        'sender_email' => 'string',
        'sender_name' => 'string',
        'sender_phone' => 'string',
        'sender_postal_code' => 'string',
        'sender_tax_id' => 'string',
        'service_level' => 'string',
        'shipment_amount' => 'float',
        'shipment_currency' => 'string',
        'shipment_gross_weight' => 'int',
        'shipment_naturetype' => 'string',
        'state' => 'string',
        'third_party_vendor_id' => 'string',
        'format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_line1' => null,
        'address_line2' => null,
        'address_line3' => null,
        'barcode' => null,
        'city' => null,
        'contents' => null,
        'cust_ref' => null,
        'cust_ref2' => null,
        'cust_ref3' => null,
        'destination_country' => null,
        'id' => 'int64',
        'postal_code' => null,
        'product' => null,
        'importer_tax_id' => null,
        'recipient' => null,
        'recipient_email' => null,
        'recipient_fax' => null,
        'recipient_phone' => null,
        'return_item_wanted' => null,
        'p_ddp' => null,
        'sender_address_line1' => null,
        'sender_address_line2' => null,
        'sender_city' => null,
        'sender_country' => null,
        'sender_email' => null,
        'sender_name' => null,
        'sender_phone' => null,
        'sender_postal_code' => null,
        'sender_tax_id' => null,
        'service_level' => null,
        'shipment_amount' => 'double',
        'shipment_currency' => null,
        'shipment_gross_weight' => 'int32',
        'shipment_naturetype' => null,
        'state' => null,
        'third_party_vendor_id' => null,
        'format' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_line1' => false,
		'address_line2' => false,
		'address_line3' => false,
		'barcode' => false,
		'city' => false,
		'contents' => false,
		'cust_ref' => false,
		'cust_ref2' => false,
		'cust_ref3' => false,
		'destination_country' => false,
		'id' => false,
		'postal_code' => false,
		'product' => false,
		'importer_tax_id' => false,
		'recipient' => false,
		'recipient_email' => false,
		'recipient_fax' => false,
		'recipient_phone' => false,
		'return_item_wanted' => false,
		'p_ddp' => false,
		'sender_address_line1' => false,
		'sender_address_line2' => false,
		'sender_city' => false,
		'sender_country' => false,
		'sender_email' => false,
		'sender_name' => false,
		'sender_phone' => false,
		'sender_postal_code' => false,
		'sender_tax_id' => false,
		'service_level' => false,
		'shipment_amount' => false,
		'shipment_currency' => false,
		'shipment_gross_weight' => false,
		'shipment_naturetype' => false,
		'state' => false,
		'third_party_vendor_id' => false,
		'format' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'address_line3' => 'addressLine3',
        'barcode' => 'barcode',
        'city' => 'city',
        'contents' => 'contents',
        'cust_ref' => 'custRef',
        'cust_ref2' => 'custRef2',
        'cust_ref3' => 'custRef3',
        'destination_country' => 'destinationCountry',
        'id' => 'id',
        'postal_code' => 'postalCode',
        'product' => 'product',
        'importer_tax_id' => 'importerTaxId',
        'recipient' => 'recipient',
        'recipient_email' => 'recipientEmail',
        'recipient_fax' => 'recipientFax',
        'recipient_phone' => 'recipientPhone',
        'return_item_wanted' => 'returnItemWanted',
        'p_ddp' => 'pDDP',
        'sender_address_line1' => 'senderAddressLine1',
        'sender_address_line2' => 'senderAddressLine2',
        'sender_city' => 'senderCity',
        'sender_country' => 'senderCountry',
        'sender_email' => 'senderEmail',
        'sender_name' => 'senderName',
        'sender_phone' => 'senderPhone',
        'sender_postal_code' => 'senderPostalCode',
        'sender_tax_id' => 'senderTaxId',
        'service_level' => 'serviceLevel',
        'shipment_amount' => 'shipmentAmount',
        'shipment_currency' => 'shipmentCurrency',
        'shipment_gross_weight' => 'shipmentGrossWeight',
        'shipment_naturetype' => 'shipmentNaturetype',
        'state' => 'state',
        'third_party_vendor_id' => 'thirdPartyVendorId',
        'format' => 'format'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_line3' => 'setAddressLine3',
        'barcode' => 'setBarcode',
        'city' => 'setCity',
        'contents' => 'setContents',
        'cust_ref' => 'setCustRef',
        'cust_ref2' => 'setCustRef2',
        'cust_ref3' => 'setCustRef3',
        'destination_country' => 'setDestinationCountry',
        'id' => 'setId',
        'postal_code' => 'setPostalCode',
        'product' => 'setProduct',
        'importer_tax_id' => 'setImporterTaxId',
        'recipient' => 'setRecipient',
        'recipient_email' => 'setRecipientEmail',
        'recipient_fax' => 'setRecipientFax',
        'recipient_phone' => 'setRecipientPhone',
        'return_item_wanted' => 'setReturnItemWanted',
        'p_ddp' => 'setPDdp',
        'sender_address_line1' => 'setSenderAddressLine1',
        'sender_address_line2' => 'setSenderAddressLine2',
        'sender_city' => 'setSenderCity',
        'sender_country' => 'setSenderCountry',
        'sender_email' => 'setSenderEmail',
        'sender_name' => 'setSenderName',
        'sender_phone' => 'setSenderPhone',
        'sender_postal_code' => 'setSenderPostalCode',
        'sender_tax_id' => 'setSenderTaxId',
        'service_level' => 'setServiceLevel',
        'shipment_amount' => 'setShipmentAmount',
        'shipment_currency' => 'setShipmentCurrency',
        'shipment_gross_weight' => 'setShipmentGrossWeight',
        'shipment_naturetype' => 'setShipmentNaturetype',
        'state' => 'setState',
        'third_party_vendor_id' => 'setThirdPartyVendorId',
        'format' => 'setFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_line3' => 'getAddressLine3',
        'barcode' => 'getBarcode',
        'city' => 'getCity',
        'contents' => 'getContents',
        'cust_ref' => 'getCustRef',
        'cust_ref2' => 'getCustRef2',
        'cust_ref3' => 'getCustRef3',
        'destination_country' => 'getDestinationCountry',
        'id' => 'getId',
        'postal_code' => 'getPostalCode',
        'product' => 'getProduct',
        'importer_tax_id' => 'getImporterTaxId',
        'recipient' => 'getRecipient',
        'recipient_email' => 'getRecipientEmail',
        'recipient_fax' => 'getRecipientFax',
        'recipient_phone' => 'getRecipientPhone',
        'return_item_wanted' => 'getReturnItemWanted',
        'p_ddp' => 'getPDdp',
        'sender_address_line1' => 'getSenderAddressLine1',
        'sender_address_line2' => 'getSenderAddressLine2',
        'sender_city' => 'getSenderCity',
        'sender_country' => 'getSenderCountry',
        'sender_email' => 'getSenderEmail',
        'sender_name' => 'getSenderName',
        'sender_phone' => 'getSenderPhone',
        'sender_postal_code' => 'getSenderPostalCode',
        'sender_tax_id' => 'getSenderTaxId',
        'service_level' => 'getServiceLevel',
        'shipment_amount' => 'getShipmentAmount',
        'shipment_currency' => 'getShipmentCurrency',
        'shipment_gross_weight' => 'getShipmentGrossWeight',
        'shipment_naturetype' => 'getShipmentNaturetype',
        'state' => 'getState',
        'third_party_vendor_id' => 'getThirdPartyVendorId',
        'format' => 'getFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SERVICE_LEVEL_PRIORITY = 'PRIORITY';
    public const SERVICE_LEVEL_STANDARD = 'STANDARD';
    public const SERVICE_LEVEL_REGISTERED = 'REGISTERED';
    public const SHIPMENT_NATURETYPE_SALE_GOODS = 'SALE_GOODS';
    public const SHIPMENT_NATURETYPE_RETURN_GOODS = 'RETURN_GOODS';
    public const SHIPMENT_NATURETYPE_COMMERCIAL_SAMPLE = 'COMMERCIAL_SAMPLE';
    public const SHIPMENT_NATURETYPE_DOCUMENTS = 'DOCUMENTS';
    public const SHIPMENT_NATURETYPE_MIXED_CONTENTS = 'MIXED_CONTENTS';
    public const SHIPMENT_NATURETYPE_OTHERS = 'OTHERS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceLevelAllowableValues()
    {
        return [
            self::SERVICE_LEVEL_PRIORITY,
            self::SERVICE_LEVEL_STANDARD,
            self::SERVICE_LEVEL_REGISTERED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentNaturetypeAllowableValues()
    {
        return [
            self::SHIPMENT_NATURETYPE_SALE_GOODS,
            self::SHIPMENT_NATURETYPE_RETURN_GOODS,
            self::SHIPMENT_NATURETYPE_COMMERCIAL_SAMPLE,
            self::SHIPMENT_NATURETYPE_DOCUMENTS,
            self::SHIPMENT_NATURETYPE_MIXED_CONTENTS,
            self::SHIPMENT_NATURETYPE_OTHERS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('address_line3', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('contents', $data ?? [], null);
        $this->setIfExists('cust_ref', $data ?? [], null);
        $this->setIfExists('cust_ref2', $data ?? [], null);
        $this->setIfExists('cust_ref3', $data ?? [], null);
        $this->setIfExists('destination_country', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('importer_tax_id', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('recipient_email', $data ?? [], null);
        $this->setIfExists('recipient_fax', $data ?? [], null);
        $this->setIfExists('recipient_phone', $data ?? [], null);
        $this->setIfExists('return_item_wanted', $data ?? [], false);
        $this->setIfExists('p_ddp', $data ?? [], false);
        $this->setIfExists('sender_address_line1', $data ?? [], null);
        $this->setIfExists('sender_address_line2', $data ?? [], null);
        $this->setIfExists('sender_city', $data ?? [], null);
        $this->setIfExists('sender_country', $data ?? [], null);
        $this->setIfExists('sender_email', $data ?? [], null);
        $this->setIfExists('sender_name', $data ?? [], null);
        $this->setIfExists('sender_phone', $data ?? [], null);
        $this->setIfExists('sender_postal_code', $data ?? [], null);
        $this->setIfExists('sender_tax_id', $data ?? [], null);
        $this->setIfExists('service_level', $data ?? [], null);
        $this->setIfExists('shipment_amount', $data ?? [], null);
        $this->setIfExists('shipment_currency', $data ?? [], null);
        $this->setIfExists('shipment_gross_weight', $data ?? [], null);
        $this->setIfExists('shipment_naturetype', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('third_party_vendor_id', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address_line1'] === null) {
            $invalidProperties[] = "'address_line1' can't be null";
        }
        if ((mb_strlen($this->container['address_line1']) > 40)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 40.";
        }

        if ((mb_strlen($this->container['address_line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) > 40)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line3']) && (mb_strlen($this->container['address_line3']) > 40)) {
            $invalidProperties[] = "invalid value for 'address_line3', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['address_line3']) && (mb_strlen($this->container['address_line3']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line3', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 40)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 40.";
        }

        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cust_ref']) && (mb_strlen($this->container['cust_ref']) > 28)) {
            $invalidProperties[] = "invalid value for 'cust_ref', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['cust_ref']) && (mb_strlen($this->container['cust_ref']) < 0)) {
            $invalidProperties[] = "invalid value for 'cust_ref', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cust_ref']) && !preg_match("/^(?![=\\-\\+@]).*/", $this->container['cust_ref'])) {
            $invalidProperties[] = "invalid value for 'cust_ref', must be conform to the pattern /^(?![=\\-\\+@]).*/.";
        }

        if (!is_null($this->container['cust_ref2']) && (mb_strlen($this->container['cust_ref2']) > 28)) {
            $invalidProperties[] = "invalid value for 'cust_ref2', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['cust_ref2']) && (mb_strlen($this->container['cust_ref2']) < 0)) {
            $invalidProperties[] = "invalid value for 'cust_ref2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cust_ref3']) && (mb_strlen($this->container['cust_ref3']) > 28)) {
            $invalidProperties[] = "invalid value for 'cust_ref3', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['cust_ref3']) && (mb_strlen($this->container['cust_ref3']) < 0)) {
            $invalidProperties[] = "invalid value for 'cust_ref3', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['destination_country'] === null) {
            $invalidProperties[] = "'destination_country' can't be null";
        }
        if ((mb_strlen($this->container['destination_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'destination_country', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['destination_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'destination_country', the character length must be bigger than or equal to 2.";
        }

        if (!preg_match("/[A-Z]{2}/", $this->container['destination_country'])) {
            $invalidProperties[] = "invalid value for 'destination_country', must be conform to the pattern /[A-Z]{2}/.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if (!is_null($this->container['importer_tax_id']) && (mb_strlen($this->container['importer_tax_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'importer_tax_id', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['importer_tax_id']) && (mb_strlen($this->container['importer_tax_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'importer_tax_id', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if ((mb_strlen($this->container['recipient']) > 30)) {
            $invalidProperties[] = "invalid value for 'recipient', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['recipient']) < 1)) {
            $invalidProperties[] = "invalid value for 'recipient', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['recipient_email']) && (mb_strlen($this->container['recipient_email']) > 50)) {
            $invalidProperties[] = "invalid value for 'recipient_email', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['recipient_email']) && (mb_strlen($this->container['recipient_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'recipient_email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['recipient_fax']) && (mb_strlen($this->container['recipient_fax']) > 15)) {
            $invalidProperties[] = "invalid value for 'recipient_fax', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['recipient_fax']) && (mb_strlen($this->container['recipient_fax']) < 0)) {
            $invalidProperties[] = "invalid value for 'recipient_fax', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['recipient_phone']) && (mb_strlen($this->container['recipient_phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'recipient_phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['recipient_phone']) && (mb_strlen($this->container['recipient_phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'recipient_phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sender_address_line1']) && (mb_strlen($this->container['sender_address_line1']) > 40)) {
            $invalidProperties[] = "invalid value for 'sender_address_line1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['sender_address_line1']) && (mb_strlen($this->container['sender_address_line1']) < 0)) {
            $invalidProperties[] = "invalid value for 'sender_address_line1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sender_address_line2']) && (mb_strlen($this->container['sender_address_line2']) > 40)) {
            $invalidProperties[] = "invalid value for 'sender_address_line2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['sender_address_line2']) && (mb_strlen($this->container['sender_address_line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'sender_address_line2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sender_city']) && (mb_strlen($this->container['sender_city']) > 40)) {
            $invalidProperties[] = "invalid value for 'sender_city', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['sender_city']) && (mb_strlen($this->container['sender_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'sender_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sender_country']) && (mb_strlen($this->container['sender_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'sender_country', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sender_country']) && (mb_strlen($this->container['sender_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'sender_country', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['sender_email']) && (mb_strlen($this->container['sender_email']) > 50)) {
            $invalidProperties[] = "invalid value for 'sender_email', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['sender_email']) && (mb_strlen($this->container['sender_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'sender_email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sender_name']) && (mb_strlen($this->container['sender_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'sender_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['sender_name']) && (mb_strlen($this->container['sender_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'sender_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sender_phone']) && (mb_strlen($this->container['sender_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'sender_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['sender_phone']) && (mb_strlen($this->container['sender_phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'sender_phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sender_postal_code']) && (mb_strlen($this->container['sender_postal_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'sender_postal_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['sender_postal_code']) && (mb_strlen($this->container['sender_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'sender_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sender_tax_id']) && (mb_strlen($this->container['sender_tax_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'sender_tax_id', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sender_tax_id']) && (mb_strlen($this->container['sender_tax_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'sender_tax_id', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['service_level'] === null) {
            $invalidProperties[] = "'service_level' can't be null";
        }
        $allowedValues = $this->getServiceLevelAllowableValues();
        if (!is_null($this->container['service_level']) && !in_array($this->container['service_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'service_level', must be one of '%s'",
                $this->container['service_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shipment_gross_weight'] === null) {
            $invalidProperties[] = "'shipment_gross_weight' can't be null";
        }
        if (($this->container['shipment_gross_weight'] > 2000)) {
            $invalidProperties[] = "invalid value for 'shipment_gross_weight', must be smaller than or equal to 2000.";
        }

        if (($this->container['shipment_gross_weight'] < 1)) {
            $invalidProperties[] = "invalid value for 'shipment_gross_weight', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getShipmentNaturetypeAllowableValues();
        if (!is_null($this->container['shipment_naturetype']) && !in_array($this->container['shipment_naturetype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_naturetype', must be one of '%s'",
                $this->container['shipment_naturetype'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 20)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) < 0)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['format']) && !preg_match("/P|G|E/", $this->container['format'])) {
            $invalidProperties[] = "invalid value for 'format', must be conform to the pattern /P|G|E/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 First line of address information of the recipient.
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            throw new \InvalidArgumentException('non-nullable address_line1 cannot be null');
        }
        if ((mb_strlen($address_line1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling Item., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($address_line1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling Item., must be bigger than or equal to 1.');
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 Second line of address information of the recipient.
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            throw new \InvalidArgumentException('non-nullable address_line2 cannot be null');
        }
        if ((mb_strlen($address_line2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling Item., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($address_line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_line3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->container['address_line3'];
    }

    /**
     * Sets address_line3
     *
     * @param string|null $address_line3 Third line of address information of the recipient.
     *
     * @return self
     */
    public function setAddressLine3($address_line3)
    {
        if (is_null($address_line3)) {
            throw new \InvalidArgumentException('non-nullable address_line3 cannot be null');
        }
        if ((mb_strlen($address_line3) > 40)) {
            throw new \InvalidArgumentException('invalid length for $address_line3 when calling Item., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($address_line3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line3 when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['address_line3'] = $address_line3;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode The barcode of this item (if available).
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City of the recipient address.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Item., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Item., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return \Spy\DHLParcel\Model\Content[]|null
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \Spy\DHLParcel\Model\Content[]|null $contents The descriptions of the content pieces.
     *
     * @return self
     */
    public function setContents($contents)
    {
        if (is_null($contents)) {
            throw new \InvalidArgumentException('non-nullable contents cannot be null');
        }
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets cust_ref
     *
     * @return string|null
     */
    public function getCustRef()
    {
        return $this->container['cust_ref'];
    }

    /**
     * Sets cust_ref
     *
     * @param string|null $cust_ref Reference to the customer.
     *
     * @return self
     */
    public function setCustRef($cust_ref)
    {
        if (is_null($cust_ref)) {
            throw new \InvalidArgumentException('non-nullable cust_ref cannot be null');
        }
        if ((mb_strlen($cust_ref) > 28)) {
            throw new \InvalidArgumentException('invalid length for $cust_ref when calling Item., must be smaller than or equal to 28.');
        }
        if ((mb_strlen($cust_ref) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cust_ref when calling Item., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^(?![=\\-\\+@]).*/", $cust_ref))) {
            throw new \InvalidArgumentException("invalid value for \$cust_ref when calling Item., must conform to the pattern /^(?![=\\-\\+@]).*/.");
        }

        $this->container['cust_ref'] = $cust_ref;

        return $this;
    }

    /**
     * Gets cust_ref2
     *
     * @return string|null
     */
    public function getCustRef2()
    {
        return $this->container['cust_ref2'];
    }

    /**
     * Sets cust_ref2
     *
     * @param string|null $cust_ref2 NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setCustRef2($cust_ref2)
    {
        if (is_null($cust_ref2)) {
            throw new \InvalidArgumentException('non-nullable cust_ref2 cannot be null');
        }
        if ((mb_strlen($cust_ref2) > 28)) {
            throw new \InvalidArgumentException('invalid length for $cust_ref2 when calling Item., must be smaller than or equal to 28.');
        }
        if ((mb_strlen($cust_ref2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cust_ref2 when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['cust_ref2'] = $cust_ref2;

        return $this;
    }

    /**
     * Gets cust_ref3
     *
     * @return string|null
     */
    public function getCustRef3()
    {
        return $this->container['cust_ref3'];
    }

    /**
     * Sets cust_ref3
     *
     * @param string|null $cust_ref3 NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setCustRef3($cust_ref3)
    {
        if (is_null($cust_ref3)) {
            throw new \InvalidArgumentException('non-nullable cust_ref3 cannot be null');
        }
        if ((mb_strlen($cust_ref3) > 28)) {
            throw new \InvalidArgumentException('invalid length for $cust_ref3 when calling Item., must be smaller than or equal to 28.');
        }
        if ((mb_strlen($cust_ref3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cust_ref3 when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['cust_ref3'] = $cust_ref3;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string $destination_country Destination country of the item, based on ISO-3166-1. Please check https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further details.
     *
     * @return self
     */
    public function setDestinationCountry($destination_country)
    {
        if (is_null($destination_country)) {
            throw new \InvalidArgumentException('non-nullable destination_country cannot be null');
        }
        if ((mb_strlen($destination_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $destination_country when calling Item., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($destination_country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $destination_country when calling Item., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/[A-Z]{2}/", $destination_country))) {
            throw new \InvalidArgumentException("invalid value for \$destination_country when calling Item., must conform to the pattern /[A-Z]{2}/.");
        }

        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The id of the item
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal code of the recipient address. Consists of numbers, upper case letters, and one space or dash between characters
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        if ((mb_strlen($postal_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Item., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product The product that is used for the shipment of this item. Available products are: GPP (Packet Plus), GMP (Packet), GMM (Business Mail Standard), GMR (Business Mail Registered), GPT (Packet Tracked).
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets importer_tax_id
     *
     * @return string|null
     */
    public function getImporterTaxId()
    {
        return $this->container['importer_tax_id'];
    }

    /**
     * Sets importer_tax_id
     *
     * @param string|null $importer_tax_id Customs reference number of the recipient, if required and applicable e.g. EORI number.
     *
     * @return self
     */
    public function setImporterTaxId($importer_tax_id)
    {
        if (is_null($importer_tax_id)) {
            throw new \InvalidArgumentException('non-nullable importer_tax_id cannot be null');
        }
        if ((mb_strlen($importer_tax_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $importer_tax_id when calling Item., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($importer_tax_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $importer_tax_id when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['importer_tax_id'] = $importer_tax_id;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient Name of the recipient.
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        if ((mb_strlen($recipient) > 30)) {
            throw new \InvalidArgumentException('invalid length for $recipient when calling Item., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($recipient) < 1)) {
            throw new \InvalidArgumentException('invalid length for $recipient when calling Item., must be bigger than or equal to 1.');
        }

        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets recipient_email
     *
     * @return string|null
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     *
     * @param string|null $recipient_email Email address of the recipient. Used for notification.
     *
     * @return self
     */
    public function setRecipientEmail($recipient_email)
    {
        if (is_null($recipient_email)) {
            throw new \InvalidArgumentException('non-nullable recipient_email cannot be null');
        }
        if ((mb_strlen($recipient_email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $recipient_email when calling Item., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($recipient_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $recipient_email when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets recipient_fax
     *
     * @return string|null
     */
    public function getRecipientFax()
    {
        return $this->container['recipient_fax'];
    }

    /**
     * Sets recipient_fax
     *
     * @param string|null $recipient_fax Fax number of the recipient
     *
     * @return self
     */
    public function setRecipientFax($recipient_fax)
    {
        if (is_null($recipient_fax)) {
            throw new \InvalidArgumentException('non-nullable recipient_fax cannot be null');
        }
        if ((mb_strlen($recipient_fax) > 15)) {
            throw new \InvalidArgumentException('invalid length for $recipient_fax when calling Item., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($recipient_fax) < 0)) {
            throw new \InvalidArgumentException('invalid length for $recipient_fax when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['recipient_fax'] = $recipient_fax;

        return $this;
    }

    /**
     * Gets recipient_phone
     *
     * @return string|null
     */
    public function getRecipientPhone()
    {
        return $this->container['recipient_phone'];
    }

    /**
     * Sets recipient_phone
     *
     * @param string|null $recipient_phone Phone number of the recipient
     *
     * @return self
     */
    public function setRecipientPhone($recipient_phone)
    {
        if (is_null($recipient_phone)) {
            throw new \InvalidArgumentException('non-nullable recipient_phone cannot be null');
        }
        if ((mb_strlen($recipient_phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $recipient_phone when calling Item., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($recipient_phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $recipient_phone when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['recipient_phone'] = $recipient_phone;

        return $this;
    }

    /**
     * Gets return_item_wanted
     *
     * @return bool|null
     */
    public function getReturnItemWanted()
    {
        return $this->container['return_item_wanted'];
    }

    /**
     * Sets return_item_wanted
     *
     * @param bool|null $return_item_wanted Is Packet Return.
     *
     * @return self
     */
    public function setReturnItemWanted($return_item_wanted)
    {
        if (is_null($return_item_wanted)) {
            throw new \InvalidArgumentException('non-nullable return_item_wanted cannot be null');
        }
        $this->container['return_item_wanted'] = $return_item_wanted;

        return $this;
    }

    /**
     * Gets p_ddp
     *
     * @return bool|null
     */
    public function getPDdp()
    {
        return $this->container['p_ddp'];
    }

    /**
     * Sets p_ddp
     *
     * @param bool|null $p_ddp Is Item pddp? FOR FUTURE USE. Not yet relvant
     *
     * @return self
     */
    public function setPDdp($p_ddp)
    {
        if (is_null($p_ddp)) {
            throw new \InvalidArgumentException('non-nullable p_ddp cannot be null');
        }
        $this->container['p_ddp'] = $p_ddp;

        return $this;
    }

    /**
     * Gets sender_address_line1
     *
     * @return string|null
     */
    public function getSenderAddressLine1()
    {
        return $this->container['sender_address_line1'];
    }

    /**
     * Sets sender_address_line1
     *
     * @param string|null $sender_address_line1 NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setSenderAddressLine1($sender_address_line1)
    {
        if (is_null($sender_address_line1)) {
            throw new \InvalidArgumentException('non-nullable sender_address_line1 cannot be null');
        }
        if ((mb_strlen($sender_address_line1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $sender_address_line1 when calling Item., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($sender_address_line1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sender_address_line1 when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['sender_address_line1'] = $sender_address_line1;

        return $this;
    }

    /**
     * Gets sender_address_line2
     *
     * @return string|null
     */
    public function getSenderAddressLine2()
    {
        return $this->container['sender_address_line2'];
    }

    /**
     * Sets sender_address_line2
     *
     * @param string|null $sender_address_line2 NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setSenderAddressLine2($sender_address_line2)
    {
        if (is_null($sender_address_line2)) {
            throw new \InvalidArgumentException('non-nullable sender_address_line2 cannot be null');
        }
        if ((mb_strlen($sender_address_line2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $sender_address_line2 when calling Item., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($sender_address_line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sender_address_line2 when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['sender_address_line2'] = $sender_address_line2;

        return $this;
    }

    /**
     * Gets sender_city
     *
     * @return string|null
     */
    public function getSenderCity()
    {
        return $this->container['sender_city'];
    }

    /**
     * Sets sender_city
     *
     * @param string|null $sender_city NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setSenderCity($sender_city)
    {
        if (is_null($sender_city)) {
            throw new \InvalidArgumentException('non-nullable sender_city cannot be null');
        }
        if ((mb_strlen($sender_city) > 40)) {
            throw new \InvalidArgumentException('invalid length for $sender_city when calling Item., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($sender_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sender_city when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['sender_city'] = $sender_city;

        return $this;
    }

    /**
     * Gets sender_country
     *
     * @return string|null
     */
    public function getSenderCountry()
    {
        return $this->container['sender_country'];
    }

    /**
     * Sets sender_country
     *
     * @param string|null $sender_country NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setSenderCountry($sender_country)
    {
        if (is_null($sender_country)) {
            throw new \InvalidArgumentException('non-nullable sender_country cannot be null');
        }
        if ((mb_strlen($sender_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sender_country when calling Item., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($sender_country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $sender_country when calling Item., must be bigger than or equal to 2.');
        }

        $this->container['sender_country'] = $sender_country;

        return $this;
    }

    /**
     * Gets sender_email
     *
     * @return string|null
     */
    public function getSenderEmail()
    {
        return $this->container['sender_email'];
    }

    /**
     * Sets sender_email
     *
     * @param string|null $sender_email NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setSenderEmail($sender_email)
    {
        if (is_null($sender_email)) {
            throw new \InvalidArgumentException('non-nullable sender_email cannot be null');
        }
        if ((mb_strlen($sender_email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $sender_email when calling Item., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($sender_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sender_email when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['sender_email'] = $sender_email;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string|null
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string|null $sender_name NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setSenderName($sender_name)
    {
        if (is_null($sender_name)) {
            throw new \InvalidArgumentException('non-nullable sender_name cannot be null');
        }
        if ((mb_strlen($sender_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $sender_name when calling Item., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($sender_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sender_name when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets sender_phone
     *
     * @return string|null
     */
    public function getSenderPhone()
    {
        return $this->container['sender_phone'];
    }

    /**
     * Sets sender_phone
     *
     * @param string|null $sender_phone NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setSenderPhone($sender_phone)
    {
        if (is_null($sender_phone)) {
            throw new \InvalidArgumentException('non-nullable sender_phone cannot be null');
        }
        if ((mb_strlen($sender_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $sender_phone when calling Item., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($sender_phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sender_phone when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['sender_phone'] = $sender_phone;

        return $this;
    }

    /**
     * Gets sender_postal_code
     *
     * @return string|null
     */
    public function getSenderPostalCode()
    {
        return $this->container['sender_postal_code'];
    }

    /**
     * Sets sender_postal_code
     *
     * @param string|null $sender_postal_code NOT RECOMMENDED, obsolete and should not be contained in requests until further notice.
     *
     * @return self
     */
    public function setSenderPostalCode($sender_postal_code)
    {
        if (is_null($sender_postal_code)) {
            throw new \InvalidArgumentException('non-nullable sender_postal_code cannot be null');
        }
        if ((mb_strlen($sender_postal_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $sender_postal_code when calling Item., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($sender_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sender_postal_code when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['sender_postal_code'] = $sender_postal_code;

        return $this;
    }

    /**
     * Gets sender_tax_id
     *
     * @return string|null
     */
    public function getSenderTaxId()
    {
        return $this->container['sender_tax_id'];
    }

    /**
     * Sets sender_tax_id
     *
     * @param string|null $sender_tax_id Customs reference number of the sender, if applicable e.g. IOSS or VOEC number.
     *
     * @return self
     */
    public function setSenderTaxId($sender_tax_id)
    {
        if (is_null($sender_tax_id)) {
            throw new \InvalidArgumentException('non-nullable sender_tax_id cannot be null');
        }
        if ((mb_strlen($sender_tax_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sender_tax_id when calling Item., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($sender_tax_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sender_tax_id when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['sender_tax_id'] = $sender_tax_id;

        return $this;
    }

    /**
     * Gets service_level
     *
     * @return string
     */
    public function getServiceLevel()
    {
        return $this->container['service_level'];
    }

    /**
     * Sets service_level
     *
     * @param string $service_level The service level that is used for the shipment of this item. There are restrictions for use of service level: REGISTERED is only available with product GMR and SalesChannel DPI, STANDARD is only available with products GMM and GMP, PRIORITY is available with all products.
     *
     * @return self
     */
    public function setServiceLevel($service_level)
    {
        if (is_null($service_level)) {
            throw new \InvalidArgumentException('non-nullable service_level cannot be null');
        }
        $allowedValues = $this->getServiceLevelAllowableValues();
        if (!in_array($service_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'service_level', must be one of '%s'",
                    $service_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_level'] = $service_level;

        return $this;
    }

    /**
     * Gets shipment_amount
     *
     * @return float|null
     */
    public function getShipmentAmount()
    {
        return $this->container['shipment_amount'];
    }

    /**
     * Sets shipment_amount
     *
     * @param float|null $shipment_amount Overall value of all content pieces of the item.
     *
     * @return self
     */
    public function setShipmentAmount($shipment_amount)
    {
        if (is_null($shipment_amount)) {
            throw new \InvalidArgumentException('non-nullable shipment_amount cannot be null');
        }
        $this->container['shipment_amount'] = $shipment_amount;

        return $this;
    }

    /**
     * Gets shipment_currency
     *
     * @return string|null
     */
    public function getShipmentCurrency()
    {
        return $this->container['shipment_currency'];
    }

    /**
     * Sets shipment_currency
     *
     * @param string|null $shipment_currency Currency code of the value, based on ISO-4217. Please check https://en.wikipedia.org/wiki/ISO_4217#Active_codes for further details.
     *
     * @return self
     */
    public function setShipmentCurrency($shipment_currency)
    {
        if (is_null($shipment_currency)) {
            throw new \InvalidArgumentException('non-nullable shipment_currency cannot be null');
        }
        $this->container['shipment_currency'] = $shipment_currency;

        return $this;
    }

    /**
     * Gets shipment_gross_weight
     *
     * @return int
     */
    public function getShipmentGrossWeight()
    {
        return $this->container['shipment_gross_weight'];
    }

    /**
     * Sets shipment_gross_weight
     *
     * @param int $shipment_gross_weight Gross weight of the item (in g). May not exceed 2000 g.
     *
     * @return self
     */
    public function setShipmentGrossWeight($shipment_gross_weight)
    {
        if (is_null($shipment_gross_weight)) {
            throw new \InvalidArgumentException('non-nullable shipment_gross_weight cannot be null');
        }

        if (($shipment_gross_weight > 2000)) {
            throw new \InvalidArgumentException('invalid value for $shipment_gross_weight when calling Item., must be smaller than or equal to 2000.');
        }
        if (($shipment_gross_weight < 1)) {
            throw new \InvalidArgumentException('invalid value for $shipment_gross_weight when calling Item., must be bigger than or equal to 1.');
        }

        $this->container['shipment_gross_weight'] = $shipment_gross_weight;

        return $this;
    }

    /**
     * Gets shipment_naturetype
     *
     * @return string|null
     */
    public function getShipmentNaturetype()
    {
        return $this->container['shipment_naturetype'];
    }

    /**
     * Sets shipment_naturetype
     *
     * @param string|null $shipment_naturetype Nature of the pieces in this item. Mandatory for non-EU shipments: SALE_GOODS, RETURN_GOODS, COMMERCIAL_SAMPLE, DOCUMENTS, MIXED_CONTENTS, OTHERS. Mandatory for non-EU shipments. GIFT is DEPRECATED and will be removed in 04/2024.
     *
     * @return self
     */
    public function setShipmentNaturetype($shipment_naturetype)
    {
        if (is_null($shipment_naturetype)) {
            throw new \InvalidArgumentException('non-nullable shipment_naturetype cannot be null');
        }
        $allowedValues = $this->getShipmentNaturetypeAllowableValues();
        if (!in_array($shipment_naturetype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_naturetype', must be one of '%s'",
                    $shipment_naturetype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_naturetype'] = $shipment_naturetype;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State of the recipient address.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        if ((mb_strlen($state) > 20)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Item., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($state) < 0)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets third_party_vendor_id
     *
     * @return string|null
     */
    public function getThirdPartyVendorId()
    {
        return $this->container['third_party_vendor_id'];
    }

    /**
     * Sets third_party_vendor_id
     *
     * @param string|null $third_party_vendor_id The ID of the 3PV/Third Party Vendor who created this item.
     *
     * @return self
     */
    public function setThirdPartyVendorId($third_party_vendor_id)
    {
        if (is_null($third_party_vendor_id)) {
            throw new \InvalidArgumentException('non-nullable third_party_vendor_id cannot be null');
        }
        $this->container['third_party_vendor_id'] = $third_party_vendor_id;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format The format. Weight limits are P: 100g, G: 500g, E: 2000g
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }

        if ((!preg_match("/P|G|E/", $format))) {
            throw new \InvalidArgumentException("invalid value for \$format when calling Item., must conform to the pattern /P|G|E/.");
        }

        $this->container['format'] = $format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


