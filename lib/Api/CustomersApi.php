<?php
/**
 * CustomersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deutsche Post International Shipping API - QA
 *
 * Welcome to the Deutsche Post International API! <br/><br/> This API provides an interface for our shipping and tracking services. It enables open integration channels for our customers and partners.
 *
 * The version of the OpenAPI document: 5.7.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\DHLParcel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
#region SPY Code
use GuzzleHttp\Cookie\CookieJar;
#endregion
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Spy\DHLParcel\ApiException;
use Spy\DHLParcel\Configuration;
use Spy\DHLParcel\HeaderSelector;
use Spy\DHLParcel\ObjectSerializer;

/**
 * CustomersApi Class Doc Comment
 *
 * @category Class
 * @package  Spy\DHLParcel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

	#region SPY Code
	protected $bXDebugOnInstance	= false;
	protected $bXDebugOnNextRequest;

	/**
	 * @param bool $bXDebugOnInstance
	 * @return $this
	 */
	public function setXDebugOnInstance(bool $bXDebugOnInstance)
	{
		$this->bXDebugOnInstance	= $bXDebugOnInstance;

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setXDebugOnNextRequest()
	{
		$this->bXDebugOnNextRequest	= true;

		return $this;
	}

	/**
	 * Gets the OpenAPI Spec Version
	 *
	 * @return string
	 */
	public static function getSpecVersion()
	{
		return '5.7.7';
	}
	#endregion

    /**
    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createClosedBag' => [
            'application/json',
        ],
        'createCustomerOrder' => [
            'application/json',
        ],
        'createItem' => [
            'application/json',
        ],
        'createReturnItem' => [
            'application/json',
        ],
        'getBagTag' => [
            'application/json',
        ],
        'getCustomerItemLabel' => [
            'application/json',
        ],
        'getItemByBarcode' => [
            'application/json',
        ],
        'getItems' => [
            'application/json',
        ],
        'getReturnItemLabel' => [
            'application/json',
        ],
        'updateCustomerItem' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createClosedBag
     *
     * Create a Closed Bag
     *
     * @param  string $customer_ekp The EKP of the customer for whom the closed bag is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ClosedBag $body The data of the closed bag. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClosedBag'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\DHLParcel\Model\ClosedBag|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function createClosedBag($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createClosedBag'][0])
    {
        list($response) = $this->createClosedBagWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);
        return $response;
    }

    /**
     * Operation createClosedBagWithHttpInfo
     *
     * Create a Closed Bag
     *
     * @param  string $customer_ekp The EKP of the customer for whom the closed bag is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ClosedBag $body The data of the closed bag. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClosedBag'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\DHLParcel\Model\ClosedBag|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClosedBagWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createClosedBag'][0])
    {
        $request = $this->createClosedBagRequest($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\DHLParcel\Model\ClosedBag' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\ClosedBag' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\ClosedBag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\DHLParcel\Model\ClosedBag';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\ClosedBag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createClosedBagAsync
     *
     * Create a Closed Bag
     *
     * @param  string $customer_ekp The EKP of the customer for whom the closed bag is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ClosedBag $body The data of the closed bag. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClosedBag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClosedBagAsync($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createClosedBag'][0])
    {
        return $this->createClosedBagAsyncWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createClosedBagAsyncWithHttpInfo
     *
     * Create a Closed Bag
     *
     * @param  string $customer_ekp The EKP of the customer for whom the closed bag is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ClosedBag $body The data of the closed bag. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClosedBag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClosedBagAsyncWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createClosedBag'][0])
    {
        $returnType = '\Spy\DHLParcel\Model\ClosedBag';
        $request = $this->createClosedBagRequest($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClosedBag'
     *
     * @param  string $customer_ekp The EKP of the customer for whom the closed bag is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ClosedBag $body The data of the closed bag. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClosedBag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClosedBagRequest($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createClosedBag'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling createClosedBag'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createClosedBag'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createClosedBag'
            );
        }



        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/bags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($third_party_vendor_id !== null) {
            $headerParams['ThirdPartyVendor-ID'] = ObjectSerializer::toHeaderValue($third_party_vendor_id);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCustomerOrder
     *
     * Create Order
     *
     * @param  string $customer_ekp The EKP of the customer for whom the order is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\AssembleOrder $body The order data and the items that shall be assembled to a new order (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who assembles this order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomerOrder'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\DHLParcel\Model\Order|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function createCustomerOrder($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createCustomerOrder'][0])
    {
        list($response) = $this->createCustomerOrderWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);
        return $response;
    }

    /**
     * Operation createCustomerOrderWithHttpInfo
     *
     * Create Order
     *
     * @param  string $customer_ekp The EKP of the customer for whom the order is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\AssembleOrder $body The order data and the items that shall be assembled to a new order (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who assembles this order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomerOrder'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\DHLParcel\Model\Order|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomerOrderWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createCustomerOrder'][0])
    {
        $request = $this->createCustomerOrderRequest($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\DHLParcel\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\DHLParcel\Model\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomerOrderAsync
     *
     * Create Order
     *
     * @param  string $customer_ekp The EKP of the customer for whom the order is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\AssembleOrder $body The order data and the items that shall be assembled to a new order (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who assembles this order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomerOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomerOrderAsync($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createCustomerOrder'][0])
    {
        return $this->createCustomerOrderAsyncWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomerOrderAsyncWithHttpInfo
     *
     * Create Order
     *
     * @param  string $customer_ekp The EKP of the customer for whom the order is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\AssembleOrder $body The order data and the items that shall be assembled to a new order (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who assembles this order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomerOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomerOrderAsyncWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createCustomerOrder'][0])
    {
        $returnType = '\Spy\DHLParcel\Model\Order';
        $request = $this->createCustomerOrderRequest($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomerOrder'
     *
     * @param  string $customer_ekp The EKP of the customer for whom the order is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\AssembleOrder $body The order data and the items that shall be assembled to a new order (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who assembles this order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomerOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomerOrderRequest($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createCustomerOrder'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling createCustomerOrder'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createCustomerOrder'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createCustomerOrder'
            );
        }



        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($third_party_vendor_id !== null) {
            $headerParams['ThirdPartyVendor-ID'] = ObjectSerializer::toHeaderValue($third_party_vendor_id);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createItem
     *
     * Create Single Item
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who creates this item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createItem'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\DHLParcel\Model\Item|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function createItem($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createItem'][0])
    {
        list($response) = $this->createItemWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);
        return $response;
    }

    /**
     * Operation createItemWithHttpInfo
     *
     * Create Single Item
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who creates this item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createItem'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\DHLParcel\Model\Item|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createItemWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createItem'][0])
    {
        $request = $this->createItemRequest($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\DHLParcel\Model\Item' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\Item' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\Item', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\DHLParcel\Model\Item';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createItemAsync
     *
     * Create Single Item
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who creates this item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createItemAsync($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createItem'][0])
    {
        return $this->createItemAsyncWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createItemAsyncWithHttpInfo
     *
     * Create Single Item
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who creates this item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createItemAsyncWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createItem'][0])
    {
        $returnType = '\Spy\DHLParcel\Model\Item';
        $request = $this->createItemRequest($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createItem'
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id The ID of the 3PV/Third Party Vendor who creates this item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createItemRequest($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createItem'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling createItem'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createItem'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createItem'
            );
        }



        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($third_party_vendor_id !== null) {
            $headerParams['ThirdPartyVendor-ID'] = ObjectSerializer::toHeaderValue($third_party_vendor_id);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReturnItem
     *
     * Create a Return Item
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return item is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ReturnItem $body The data of the return item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReturnItem'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\DHLParcel\Model\ReturnItemResponse|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function createReturnItem($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createReturnItem'][0])
    {
        list($response) = $this->createReturnItemWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);
        return $response;
    }

    /**
     * Operation createReturnItemWithHttpInfo
     *
     * Create a Return Item
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return item is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ReturnItem $body The data of the return item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReturnItem'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\DHLParcel\Model\ReturnItemResponse|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReturnItemWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createReturnItem'][0])
    {
        $request = $this->createReturnItemRequest($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\DHLParcel\Model\ReturnItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\ReturnItemResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\ReturnItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\DHLParcel\Model\ReturnItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\ReturnItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createReturnItemAsync
     *
     * Create a Return Item
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return item is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ReturnItem $body The data of the return item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReturnItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReturnItemAsync($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createReturnItem'][0])
    {
        return $this->createReturnItemAsyncWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReturnItemAsyncWithHttpInfo
     *
     * Create a Return Item
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return item is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ReturnItem $body The data of the return item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReturnItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReturnItemAsyncWithHttpInfo($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createReturnItem'][0])
    {
        $returnType = '\Spy\DHLParcel\Model\ReturnItemResponse';
        $request = $this->createReturnItemRequest($customer_ekp, $authorization, $body, $third_party_vendor_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReturnItem'
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return item is created (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  \Spy\DHLParcel\Model\ReturnItem $body The data of the return item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReturnItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createReturnItemRequest($customer_ekp, $authorization, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['createReturnItem'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling createReturnItem'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createReturnItem'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createReturnItem'
            );
        }



        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/returnitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($third_party_vendor_id !== null) {
            $headerParams['ThirdPartyVendor-ID'] = ObjectSerializer::toHeaderValue($third_party_vendor_id);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBagTag
     *
     * Get Label for Bag
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $bag_id The id of the bag. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBagTag'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function getBagTag($customer_ekp, $bag_id, $authorization, $accept, string $contentType = self::contentTypes['getBagTag'][0])
    {
        list($response) = $this->getBagTagWithHttpInfo($customer_ekp, $bag_id, $authorization, $accept, $contentType);
        return $response;
    }

    /**
     * Operation getBagTagWithHttpInfo
     *
     * Get Label for Bag
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $bag_id The id of the bag. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBagTag'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[]|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBagTagWithHttpInfo($customer_ekp, $bag_id, $authorization, $accept, string $contentType = self::contentTypes['getBagTag'][0])
    {
        $request = $this->getBagTagRequest($customer_ekp, $bag_id, $authorization, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBagTagAsync
     *
     * Get Label for Bag
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $bag_id The id of the bag. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBagTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBagTagAsync($customer_ekp, $bag_id, $authorization, $accept, string $contentType = self::contentTypes['getBagTag'][0])
    {
        return $this->getBagTagAsyncWithHttpInfo($customer_ekp, $bag_id, $authorization, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBagTagAsyncWithHttpInfo
     *
     * Get Label for Bag
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $bag_id The id of the bag. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBagTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBagTagAsyncWithHttpInfo($customer_ekp, $bag_id, $authorization, $accept, string $contentType = self::contentTypes['getBagTag'][0])
    {
        $returnType = 'string[]';
        $request = $this->getBagTagRequest($customer_ekp, $bag_id, $authorization, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBagTag'
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $bag_id The id of the bag. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBagTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBagTagRequest($customer_ekp, $bag_id, $authorization, $accept, string $contentType = self::contentTypes['getBagTag'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling getBagTag'
            );
        }

        // verify the required parameter 'bag_id' is set
        if ($bag_id === null || (is_array($bag_id) && count($bag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bag_id when calling getBagTag'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getBagTag'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling getBagTag'
            );
        }


        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/bags/{bagId}/label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }
        // path params
        if ($bag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bagId' . '}',
                ObjectSerializer::toPathValue($bag_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/pdf+singlepage', 'application/pdf+singlepage+6x4', 'application/zpl', 'application/zpl+6x4', 'application/zpl+rotated', 'application/zpl+rotated+6x4', 'image/png', 'image/png+6x4', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerItemLabel
     *
     * Get Label for Item
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $barcode The id of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerItemLabel'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function getCustomerItemLabel($customer_ekp, $barcode, $authorization, $accept, string $contentType = self::contentTypes['getCustomerItemLabel'][0])
    {
        list($response) = $this->getCustomerItemLabelWithHttpInfo($customer_ekp, $barcode, $authorization, $accept, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerItemLabelWithHttpInfo
     *
     * Get Label for Item
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $barcode The id of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerItemLabel'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[]|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerItemLabelWithHttpInfo($customer_ekp, $barcode, $authorization, $accept, string $contentType = self::contentTypes['getCustomerItemLabel'][0])
    {
        $request = $this->getCustomerItemLabelRequest($customer_ekp, $barcode, $authorization, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerItemLabelAsync
     *
     * Get Label for Item
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $barcode The id of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerItemLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerItemLabelAsync($customer_ekp, $barcode, $authorization, $accept, string $contentType = self::contentTypes['getCustomerItemLabel'][0])
    {
        return $this->getCustomerItemLabelAsyncWithHttpInfo($customer_ekp, $barcode, $authorization, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerItemLabelAsyncWithHttpInfo
     *
     * Get Label for Item
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $barcode The id of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerItemLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerItemLabelAsyncWithHttpInfo($customer_ekp, $barcode, $authorization, $accept, string $contentType = self::contentTypes['getCustomerItemLabel'][0])
    {
        $returnType = 'string[]';
        $request = $this->getCustomerItemLabelRequest($customer_ekp, $barcode, $authorization, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerItemLabel'
     *
     * @param  string $customer_ekp customerEkp (required)
     * @param  string $barcode The id of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerItemLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerItemLabelRequest($customer_ekp, $barcode, $authorization, $accept, string $contentType = self::contentTypes['getCustomerItemLabel'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling getCustomerItemLabel'
            );
        }

        // verify the required parameter 'barcode' is set
        if ($barcode === null || (is_array($barcode) && count($barcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcode when calling getCustomerItemLabel'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getCustomerItemLabel'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling getCustomerItemLabel'
            );
        }


        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/items/{barcode}/label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }
        // path params
        if ($barcode !== null) {
            $resourcePath = str_replace(
                '{' . 'barcode' . '}',
                ObjectSerializer::toPathValue($barcode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/pdf+singlepage', 'application/pdf+singlepage+6x4', 'application/zpl', 'application/zpl+6x4', 'application/zpl+rotated', 'application/zpl+rotated+6x4', 'image/png', 'image/png+6x4', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemByBarcode
     *
     * Retrieve Data for Item
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemByBarcode'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\DHLParcel\Model\Item|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function getItemByBarcode($customer_ekp, $barcode, $authorization, string $contentType = self::contentTypes['getItemByBarcode'][0])
    {
        list($response) = $this->getItemByBarcodeWithHttpInfo($customer_ekp, $barcode, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation getItemByBarcodeWithHttpInfo
     *
     * Retrieve Data for Item
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemByBarcode'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\DHLParcel\Model\Item|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemByBarcodeWithHttpInfo($customer_ekp, $barcode, $authorization, string $contentType = self::contentTypes['getItemByBarcode'][0])
    {
        $request = $this->getItemByBarcodeRequest($customer_ekp, $barcode, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\DHLParcel\Model\Item' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\Item' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\Item', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\DHLParcel\Model\Item';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemByBarcodeAsync
     *
     * Retrieve Data for Item
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemByBarcode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemByBarcodeAsync($customer_ekp, $barcode, $authorization, string $contentType = self::contentTypes['getItemByBarcode'][0])
    {
        return $this->getItemByBarcodeAsyncWithHttpInfo($customer_ekp, $barcode, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemByBarcodeAsyncWithHttpInfo
     *
     * Retrieve Data for Item
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemByBarcode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemByBarcodeAsyncWithHttpInfo($customer_ekp, $barcode, $authorization, string $contentType = self::contentTypes['getItemByBarcode'][0])
    {
        $returnType = '\Spy\DHLParcel\Model\Item';
        $request = $this->getItemByBarcodeRequest($customer_ekp, $barcode, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemByBarcode'
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemByBarcode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemByBarcodeRequest($customer_ekp, $barcode, $authorization, string $contentType = self::contentTypes['getItemByBarcode'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling getItemByBarcode'
            );
        }

        // verify the required parameter 'barcode' is set
        if ($barcode === null || (is_array($barcode) && count($barcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcode when calling getItemByBarcode'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getItemByBarcode'
            );
        }


        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/items/{barcode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }
        // path params
        if ($barcode !== null) {
            $resourcePath = str_replace(
                '{' . 'barcode' . '}',
                ObjectSerializer::toPathValue($barcode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItems
     *
     * Get Available Items
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $status The status for which all items are requested. Can be empty, then the defaults to all items with the status NEW. (optional, default to 'NEW')
     * @param  int $page Page of the results to receive. Can be omitted, then the default is the first page (page # 0). (optional, default to 0)
     * @param  int $page_size Number of items per page. Can be omitted, then the default is 10 items per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\DHLParcel\Model\Item|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function getItems($customer_ekp, $authorization, $status = 'NEW', $page = 0, $page_size = 10, string $contentType = self::contentTypes['getItems'][0])
    {
        list($response) = $this->getItemsWithHttpInfo($customer_ekp, $authorization, $status, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getItemsWithHttpInfo
     *
     * Get Available Items
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $status The status for which all items are requested. Can be empty, then the defaults to all items with the status NEW. (optional, default to 'NEW')
     * @param  int $page Page of the results to receive. Can be omitted, then the default is the first page (page # 0). (optional, default to 0)
     * @param  int $page_size Number of items per page. Can be omitted, then the default is 10 items per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\DHLParcel\Model\Item|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsWithHttpInfo($customer_ekp, $authorization, $status = 'NEW', $page = 0, $page_size = 10, string $contentType = self::contentTypes['getItems'][0])
    {
        $request = $this->getItemsRequest($customer_ekp, $authorization, $status, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\DHLParcel\Model\Item' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\Item' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\Item', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\DHLParcel\Model\Item';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsAsync
     *
     * Get Available Items
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $status The status for which all items are requested. Can be empty, then the defaults to all items with the status NEW. (optional, default to 'NEW')
     * @param  int $page Page of the results to receive. Can be omitted, then the default is the first page (page # 0). (optional, default to 0)
     * @param  int $page_size Number of items per page. Can be omitted, then the default is 10 items per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsAsync($customer_ekp, $authorization, $status = 'NEW', $page = 0, $page_size = 10, string $contentType = self::contentTypes['getItems'][0])
    {
        return $this->getItemsAsyncWithHttpInfo($customer_ekp, $authorization, $status, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsAsyncWithHttpInfo
     *
     * Get Available Items
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $status The status for which all items are requested. Can be empty, then the defaults to all items with the status NEW. (optional, default to 'NEW')
     * @param  int $page Page of the results to receive. Can be omitted, then the default is the first page (page # 0). (optional, default to 0)
     * @param  int $page_size Number of items per page. Can be omitted, then the default is 10 items per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsAsyncWithHttpInfo($customer_ekp, $authorization, $status = 'NEW', $page = 0, $page_size = 10, string $contentType = self::contentTypes['getItems'][0])
    {
        $returnType = '\Spy\DHLParcel\Model\Item';
        $request = $this->getItemsRequest($customer_ekp, $authorization, $status, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItems'
     *
     * @param  string $customer_ekp The customers ekp for which all items are requested. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $status The status for which all items are requested. Can be empty, then the defaults to all items with the status NEW. (optional, default to 'NEW')
     * @param  int $page Page of the results to receive. Can be omitted, then the default is the first page (page # 0). (optional, default to 0)
     * @param  int $page_size Number of items per page. Can be omitted, then the default is 10 items per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsRequest($customer_ekp, $authorization, $status = 'NEW', $page = 0, $page_size = 10, string $contentType = self::contentTypes['getItems'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling getItems'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getItems'
            );
        }





        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReturnItemLabel
     *
     * Retrieve Label for Return Item
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return label is requested (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnItemLabel'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function getReturnItemLabel($customer_ekp, $barcode, $authorization, $accept = null, string $contentType = self::contentTypes['getReturnItemLabel'][0])
    {
        list($response) = $this->getReturnItemLabelWithHttpInfo($customer_ekp, $barcode, $authorization, $accept, $contentType);
        return $response;
    }

    /**
     * Operation getReturnItemLabelWithHttpInfo
     *
     * Retrieve Label for Return Item
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return label is requested (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnItemLabel'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[]|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReturnItemLabelWithHttpInfo($customer_ekp, $barcode, $authorization, $accept = null, string $contentType = self::contentTypes['getReturnItemLabel'][0])
    {
        $request = $this->getReturnItemLabelRequest($customer_ekp, $barcode, $authorization, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReturnItemLabelAsync
     *
     * Retrieve Label for Return Item
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return label is requested (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnItemLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReturnItemLabelAsync($customer_ekp, $barcode, $authorization, $accept = null, string $contentType = self::contentTypes['getReturnItemLabel'][0])
    {
        return $this->getReturnItemLabelAsyncWithHttpInfo($customer_ekp, $barcode, $authorization, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReturnItemLabelAsyncWithHttpInfo
     *
     * Retrieve Label for Return Item
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return label is requested (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnItemLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReturnItemLabelAsyncWithHttpInfo($customer_ekp, $barcode, $authorization, $accept = null, string $contentType = self::contentTypes['getReturnItemLabel'][0])
    {
        $returnType = 'string[]';
        $request = $this->getReturnItemLabelRequest($customer_ekp, $barcode, $authorization, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReturnItemLabel'
     *
     * @param  string $customer_ekp The EKP of the customer for whom the return label is requested (required)
     * @param  string $barcode The barcode of the item. (required)
     * @param  string $authorization Bearer Auth access_token together with the \&quot;Bearer\&quot; prefix is required. **Example** of the header value:\&quot;*Bearer 0UuA.....*\&quot; (required)
     * @param  string $accept Bytestream containing the media type of the generated label. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnItemLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReturnItemLabelRequest($customer_ekp, $barcode, $authorization, $accept = null, string $contentType = self::contentTypes['getReturnItemLabel'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling getReturnItemLabel'
            );
        }

        // verify the required parameter 'barcode' is set
        if ($barcode === null || (is_array($barcode) && count($barcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcode when calling getReturnItemLabel'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getReturnItemLabel'
            );
        }



        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/returnitems/{barcode}/label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }
        // path params
        if ($barcode !== null) {
            $resourcePath = str_replace(
                '{' . 'barcode' . '}',
                ObjectSerializer::toPathValue($barcode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/pdf+singlepage', 'application/pdf+singlepage+6x4', 'application/zpl', 'application/zpl+6x4', 'application/zpl+rotated', 'application/zpl+rotated+6x4', 'image/png', 'image/png+6x4', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerItem
     *
     * Update a single item.
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $barcode The barcode for the item to be updated. (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerItem'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\DHLParcel\Model\Item|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO
     */
    public function updateCustomerItem($customer_ekp, $barcode, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['updateCustomerItem'][0])
    {
        list($response) = $this->updateCustomerItemWithHttpInfo($customer_ekp, $barcode, $body, $third_party_vendor_id, $contentType);
        return $response;
    }

    /**
     * Operation updateCustomerItemWithHttpInfo
     *
     * Update a single item.
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $barcode The barcode for the item to be updated. (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerItem'] to see the possible values for this operation
     *
     * @throws \Spy\DHLParcel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\DHLParcel\Model\Item|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO|\Spy\DHLParcel\Model\CwsErrorDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerItemWithHttpInfo($customer_ekp, $barcode, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['updateCustomerItem'][0])
    {
        $request = $this->updateCustomerItemRequest($customer_ekp, $barcode, $body, $third_party_vendor_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\DHLParcel\Model\Item' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\Item' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\Item', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Spy\DHLParcel\Model\CwsErrorDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\DHLParcel\Model\CwsErrorDTO' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\DHLParcel\Model\CwsErrorDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\DHLParcel\Model\Item';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\DHLParcel\Model\CwsErrorDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerItemAsync
     *
     * Update a single item.
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $barcode The barcode for the item to be updated. (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerItemAsync($customer_ekp, $barcode, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['updateCustomerItem'][0])
    {
        return $this->updateCustomerItemAsyncWithHttpInfo($customer_ekp, $barcode, $body, $third_party_vendor_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerItemAsyncWithHttpInfo
     *
     * Update a single item.
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $barcode The barcode for the item to be updated. (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerItemAsyncWithHttpInfo($customer_ekp, $barcode, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['updateCustomerItem'][0])
    {
        $returnType = '\Spy\DHLParcel\Model\Item';
        $request = $this->updateCustomerItemRequest($customer_ekp, $barcode, $body, $third_party_vendor_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerItem'
     *
     * @param  string $customer_ekp The customers ekp for whom the item shall be created. (required)
     * @param  string $barcode The barcode for the item to be updated. (required)
     * @param  \Spy\DHLParcel\Model\Item $body The item that shall be created. (required)
     * @param  string $third_party_vendor_id ID to identify a third party vendor. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomerItemRequest($customer_ekp, $barcode, $body, $third_party_vendor_id = null, string $contentType = self::contentTypes['updateCustomerItem'][0])
    {

        // verify the required parameter 'customer_ekp' is set
        if ($customer_ekp === null || (is_array($customer_ekp) && count($customer_ekp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ekp when calling updateCustomerItem'
            );
        }

        // verify the required parameter 'barcode' is set
        if ($barcode === null || (is_array($barcode) && count($barcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcode when calling updateCustomerItem'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateCustomerItem'
            );
        }



        $resourcePath = '/dpi/shipping/v1/customers/{customerEkp}/items/{barcode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($third_party_vendor_id !== null) {
            $headerParams['ThirdPartyVendor-ID'] = ObjectSerializer::toHeaderValue($third_party_vendor_id);
        }

        // path params
        if ($customer_ekp !== null) {
            $resourcePath = str_replace(
                '{' . 'customerEkp' . '}',
                ObjectSerializer::toPathValue($customer_ekp),
                $resourcePath
            );
        }
        // path params
        if ($barcode !== null) {
            $resourcePath = str_replace(
                '{' . 'barcode' . '}',
                ObjectSerializer::toPathValue($barcode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

		#region SPY Code
		$options[RequestOptions::HEADERS]	= [
			'X-OpenAPISpecVersion'	=> '5.7.7',
		];
		$bEnableXDebug	= $this->bXDebugOnNextRequest;

		if($bEnableXDebug === null)
		{
			$bEnableXDebug	= $this->bXDebugOnInstance;
		}

		$this->bXDebugOnNextRequest	= null;

		if($bEnableXDebug)
		{
			if(preg_match('/^(?:https?:\/\/)?([^\/:]+\.[^\/:]+)/i', $this->getConfig()->getHost(), $arrMatches) === 1)
			{
				$options['cookies'] = CookieJar::fromArray(
					[
						'XDEBUG_SESSION'	=> 'PHPSTORM',
					],
					$arrMatches[1]
				);
			}
		}
		#endregion

        return $options;
    }
}
